This is assuan.info, produced by makeinfo version 4.8 from assuan.texi.

INFO-DIR-SECTION GNU Libraries
START-INFO-DIR-ENTRY
* Assuan: (assuan).        An IPC library for non-persistent servers.
END-INFO-DIR-ENTRY
   This file documents the use and the internals of Assuan.

   This is Edition 1.0.0, last updated 31 October 2006, of `The
`Developing with Assuan' Manual', for Version 1.0.0.

   Published by the Free Software Foundation
51 Franklin Street, Fifth Floor
Boston, MA 02110-1301 USA

   Copyright (C) 2002, 2003, 2006 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled "Copying".


File: assuan.info,  Node: Top,  Next: Introduction,  Up: (dir)

Introduction
************

This manual documents how to exploit the Assuan library, a simple
interprocess communcation library.

* Menu:

* Introduction::        An introduction to and the motivation behind Assuan.
* Assuan::              Description of the Assuan protocol.
* Implementation::      Overview of the implementation.
* Preparation::         What you should do before using the library.
* Generalities::        Initialization code and data types used.
* Client code::         How to develop an Assuan client.
* Server code::         How to develop an Assuan server.
* Utilities::           Utility functions.

Miscellaneous

* Library Copying::     GNU Lesser General Public License says
                        how you can copy and share Assuan.
* Copying::             How you can copy and share this manual.

Indices

* Index::	        Index of concepts and symbol names.


File: assuan.info,  Node: Introduction,  Next: Assuan,  Prev: Top,  Up: Top

1 Introduction to Assuan
************************

In an ideal world, Assuan is irrelevant.  Assuan's primary use is to
allow a client to interact with a non-persistent server.  Using Assuan,
this is accomplished by forking a subprocess and communicating with it
via, for example, a pipe or Unix domain socket.  This method is neither
elegant nor efficient especially when there is a lot of data spread
across several transactions: not only is there a penalty for an
increased number of context switches, but also a significant amount of
data is MEMCPYed from the client to a file descriptor and from the file
descriptor to the server.  Despite these and other disadvantages, this
type of client/server communication can be useful: the client is
completely separate from the server; they are in different address
spaces.  This is especially important in situations where the server
must have a known degree of reliability and data must be protected: as
the Assuan protocol is well defined and clients cannot corrupt the
servers' address space, auditing become much easier.

   Assuan was developed for use by the GNU Privacy Guard, GnuPG, to
prevent potentially buggy clients from unwittingly corrupting sensitive
transactions or compromising data such as a secret key.  Assuan permits
the servers, which do the actual work, e.g. encryption and decryption
of data using a secret key, to be developed independently of the user
interfaces, e.g. mail clients and other encryption front ends.  Like a
shared library, the interface is well defined and any number of front
ends can use it; however, unlike a shared library, the client cannot
see or touch the server's data.  As with any modular system, Assuan
helps keep the servers small and understandable help to make code more
understandable and less error prone.

   Assuan is not, however, limited to use with GnuPG servers and
clients: it was design to be flexible enough to meet the demands of
almost any transaction based environment with non-persistent servers.


File: assuan.info,  Node: Assuan,  Next: Implementation,  Prev: Introduction,  Up: Top

2 Description of the Assuan protocol.
*************************************

The architecture of the modular GnuPG system is based on several highly
specialized modules which compose a network of client/server
communication.  A common framework for intermodule communication is
therefore needed and should be implemented in a library.

   Goals:

   * Common framework for module communication

   * Easy debugging

   * Easy module testing

   * Extendible

   * Optional authentication and encryption facility

   * Usable to access external hardware

   Design criteria:

   * Client server with back channel

   * Use a mainly text based protocol

   * Escape certain control characters

   * Allow indefinite data length

   * Request confidentiality for parts of the communication

   * Dummy module to allow direct linking of client and server

   * Inline data or descriptor passing for bulk data

   * No protection against DoS needed

   * Subliminal channels are not an issue


File: assuan.info,  Node: Implementation,  Next: Preparation,  Prev: Assuan,  Up: Top

3 Implementation
****************

The implementation is line based with a maximum line size of 1000
octets.  The default IPC mechanism are Unix Domain Sockets.

   On a connect request the server responds either with an okay or an
error status.  For authentication check the server may send an Inquiry
Response prior to the first Okay, it may also issue Status messages.
The server must check that the client is allowed to connect, this is
done by requesting the credentials for the peer and comparing them to
those of the server.  This avoids attacks based on wrong socket
permissions.

   It may choose to delay the first response in case of an error.  The
server never closes the connection - however the lower protocol may do
so after some time of inactivity or when the connection is in an error
state.

   All textual messages are assumed to be in UTF-8 unless otherwise
noted.

* Menu:

* Server responses::    Description of server responses.
* Client requests::     Description of client requests.
* Error codes::         List of error and status codes.


File: assuan.info,  Node: Server responses,  Next: Client requests,  Up: Implementation

3.1 Server responses
====================

`OK  [<arbitrary debugging information>]'
     Request was successful.

`ERR ERRORCODE [<human readable error description>]'
     Request could not be fulfilled.  The error codes are mostly
     application specific except for a few common ones.

`S KEYWORD <status information depending on keyword>'
     Informational output by the server, still processing the request.

`# <string>'
     Comment line issued only for debugging purposes.  Totally ignored.

`D <raw data>'
     Raw data returned to client. There must be exactly one space after
     the 'D'.  The values for '%', CR and LF must be percent escaped;
     this is encoded as %25, %0D and %0A.  Only uppercase letters
     should be used in the hexadecimal representation.  Other
     characters may be percent escaped for easier debugging.  All these
     Data lines are considered one data stream up to the OK or ERR
     response.  Status and Inquiry Responses may be mixed with the Data
     lines.

`INQUIRE KEYWORD <parameters>'
     Server needs further information from the client.  The client
     should answer with a command which is allowed after an inquiry.
     Note that the server does not confirm that client command but
     either continues processing or ends processing with an error
     status.  Not all commands are allowed.

   A client should only check the first letter of each line and then
skip over to the next token (except for data lines where the raw data
starts exactly after 2 bytes).  Lines larger than 1000 bytes should be
treated as a communication error. (The rationale for having a line
length limit is to allow for easier multiplexing of several channels).


File: assuan.info,  Node: Client requests,  Next: Error codes,  Prev: Server responses,  Up: Implementation

3.2 Client requests
===================

The server waits for client requests after he sent an Okay or Error.
The client should not issue a request in other cases.

     COMMAND <parameters>

   COMMAND is a one word string without preceding white space.
Parameters are command specific, CR, LF and the percent signs should be
percent escaped as described above.  To send a backslash as the last
character it should also be percent escaped.  Percent escaping is
allowed anywhere in the parameters but not in the command.  The line
ends with a CR, LF or just a LF.

   Not yet implemented feature: If there is a need for a parameter list
longer than the line length limit (1000 characters including command and
CR, LF), the last character of the line (right before the CR/LF or LF)
must be a non-escape encoded backslash. The following line is then
expected to be a continuation of the line with the backslash replaced by
a blank and the line ending removed.

     D <raw data>

   Raw data to the server. There must be exactly one space after the
'D'.  The values for '%', CR and LF must be percent escaped; this is
encoded as %25, %0D and %0A.  Only uppercase letters should be used in
the hexadecimal representation.  Other characters may be percent
escaped for easier debugging.  All these Data lines are considered one
data stream up to the OKAY or ERROR response.  Status and Inquiry
Responses may be mixed with the Data lines.

     END

   Lines beginning with a `#' or empty lines are ignored.  This is
useful to comment test scripts.

   Although the commands are application specific, some of them are
used by all protocols and partly directly supported by the Assuan
library:

`CANCEL'
     This command is used for future extensions.

`BYE'
     Close the connect, the server will reply with an `OK'.

`AUTH'
     Not yet specified as we don't implement it in the first phase.
     See my mail to gpa-dev on 2001-10-25 about the rationale for
     measurements against local attacks.

`RESET'
     Reset the connection but not any existing authentication.  The
     server should release all resources associated with the connection.

`END'
     Used by a client to mark the end of raw data.  The server may send
     END to indicate a partial end of data.

`HELP'
     Reserved for future extensions.

`QUIT'
     Reserved for future extensions.

`OPTION'
     Set options for the connection.  The syntax of such a line is
            OPTION NAME [ [=] VALUE ]
     Leading and trailing spaces around NAME and VALUE are allowed but
     should be ignored.  For compatibility reasons, NAME may be
     prefixed with two dashes.  The use of the equal sign is optional
     but suggested if VALUE is given.


File: assuan.info,  Node: Error codes,  Prev: Client requests,  Up: Implementation

3.3 Error codes
===============

In general Libassuan should be used with gpg-error style error codes.
For compatibility reasons and for applications not wanting to use these
error codes, the old Assuan error codes may still be used.  In fact they
are used by default.  To switch to gpg-error style error codes,
applications should call the *Note function
assuan_set_assuan_err_source:: right after startup.


File: assuan.info,  Node: Preparation,  Next: Generalities,  Prev: Implementation,  Up: Top

4 Preparation
*************

To use `LIBASSUAN', you have to perform some changes to your sources
and the build system.  The necessary changes are small and explained in
the following sections.

* Menu:

* Header::                 What header file you need to include.
* Building sources::       How to build sources using the library.
* Automake::               How to build sources with the help of Automake.
* Multi Threading::        How LIBASSUAN can be used in a MT environment.


File: assuan.info,  Node: Header,  Next: Building sources,  Up: Preparation

4.1 Header
==========

All interfaces (data types and functions) of LIBASSUAN are defined in
the header file `assuan.h'.  You must include this in all source files
using the library, either directly or through some other header file,
like this:

     #include <assuan.h>

   The name space of `ASSUAN' is `assuan_*' for function and type names
and `ASSUAN*' for other symbols.  In addition the same name prefixes
with one prepended underscore are reserved for internal use and should
never be used by an application.


File: assuan.info,  Node: Building sources,  Next: Automake,  Prev: Header,  Up: Preparation

4.2 Building sources
====================

If you want to compile a source file including the `assuan.h' header
file, you must make sure that the compiler can find it in the directory
hierarchy.  This is accomplished by adding the path to the directory in
which the header file is located to the compilers include file search
path (via the `-I' option).

   However, the path to the include file is determined at the time the
source is configured.  To solve this problem, LIBGCRYPT ships with a
small helper program `libassuan-config' that knows the path to the
include file and other configuration options.  The options that need to
be added to the compiler invocation at compile time are output by the
`--cflags' option to `libassuan-config'.  The following example shows
how it can be used at the command line:

     gcc -c foo.c $(libassuan-config --cflags)

   Adding the output of `libassuan-config --cflags' to the compiler's
command line will ensure that the compiler can find the `assuan.h'
header file.

   A similar problem occurs when linking the program with the library.
Again, the compiler/linker has to find the library files.  For this to
work, the path to the library files has to be added to the library
search path (via the `-L' option).  For this, the option `--libs' to
`libassuan-config' can be used.  For convenience, this option also
outputs all other options that are required to link the program with
the LIBASSUAN libraries (in particular, the `-lassuan' option).  The
example shows how to link `foo.o' with the LIBASSUAN library to a
program `foo'.

     gcc -o foo foo.o $(libassuan-config --libs)

   Of course you can also combine both examples to a single command by
specifying both options to `libassuan-config':

     gcc -o foo foo.c $(libassuan-config --cflags --libs)

   If your application uses Pth or pthread, you need to pass the option
`--thread=pth' respective `--thread=pthread' to the invocation of
`libassuan-config'.


File: assuan.info,  Node: Automake,  Next: Multi Threading,  Prev: Building sources,  Up: Preparation

4.3 Building sources using Automake
===================================

It is much easier if you use GNU Automake instead of writing your own
Makefiles.  If you do that you do not have to worry about finding and
invoking the `libassuan-config' script at all.  LIBASSUAN provides an
Automake macro that does all the work for you.

 -- Macro: AM_PATH_LIBASSUAN ([MINIMUM-VERSION], [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     Check whether LIBASSUAN (at least version MINIMUM-VERSION, if
     given) exists on the host system.  If it is found, execute
     ACTION-IF-FOUND, otherwise do ACTION-IF-NOT-FOUND, if given.

     Additionally, the function defines `LIBASSUAN_CFLAGS' to the flags
     needed for compilation of the program to find the `assuan.h'
     header file, and `LIBASSUAN_LIBS' to the linker flags needed to
     link the program to the LIBASSUAN library.

   You can use the defined Autoconf variables like this in your
`Makefile.am':

     AM_CPPFLAGS = $(LIBASSUAN_CFLAGS)
     LDADD = $(LIBASSUAN_LIBS)

 -- Macro: AM_PATH_LIBASSUAN_PTH ([MINIMUM-VERSION], [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     Same as `AM_PATH_LIBASSUAN' but checks for the GNU Pth enabled
     version of the library and defines `LIBASSUAN_PTH_CFLAGS'
     `LIBASSUAN_PTH_LIBS' instead.  Use this is you are using GNU Pth.
     Note that you also need to pass the appropriate options for Pth to
     the compiler and linker.

 -- Macro: AM_PATH_LIBASSUAN_PTHREAD ([MINIMUM-VERSION],
          [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
     Same as `AM_PATH_LIBASSUAN' but checks for the pthreads enabled
     version of the library and defines `LIBASSUAN_PTHREAD_CFLAGS'
     `LIBASSUAN_PTHREAD_LIBS' instead.  Use this is you are using GNU
     Pth.  Note that you also need to pass the appropriate options for
     Pth to the compiler and linker.


File: assuan.info,  Node: Multi Threading,  Prev: Automake,  Up: Preparation

4.4 Multi Threading
===================

The LIBGCRYPT library is thread-safe if you adhere to the following
requirements:

   * Run the initialization functions before you actually start to use
     threads.

   * Only one thread at a time may access an LIBASSUAN context.

   * Use `assuan_set_assuan_log_stream' to setup a default log stream.


File: assuan.info,  Node: Generalities,  Next: Client code,  Prev: Preparation,  Up: Top

5 Generalities
**************

* Menu:

* Data Types::                  Data types used by LIBASSUAN.
* Initializing the library::    How to initialize the library.
* Reading and Writing::         How to communicate with the peer.


File: assuan.info,  Node: Data Types,  Next: Initializing the library,  Up: Generalities

5.1 Data Types used by the library
==================================

LIBASSUAN uses a context approach to keep state.  The following data
type is used all over the place:

 -- Data type: assuan_context_t
     The `assuan_context_t' type is a pointer to an object maintained
     internally by the library.  Certain Assuan functions allocate such
     a context and return it to the caller using this data type. Other
     functions take this data type to access the state created by these
     functions.

For compatibility with older versions of LIBASSUAN a data type for
error return values exists:

 -- Data type: assuan_error_t
     This has originally been an `enum' but applications should either
     view it as an `int' or if possible use the `gpg_error_t' data type
     as defined by the LIBGPG-ERROR package.


File: assuan.info,  Node: Initializing the library,  Next: Reading and Writing,  Prev: Data Types,  Up: Generalities

5.2 Initializing the library
============================

In general the library requires no initialization.  There are however
some initialization hooks provided which are often useful.  These
should be called as early as possible and in a multi-threaded
application before a second thread is created.

   If your application uses its own memory allocation functions or
wrappers it is good idea to tell LIBASSUAN about it so it can make use
of the same functions or wrappers.  You do this with

 -- Function: void assuan_set_malloc_hooks
          (void *(*MALLOC_FUNC)(size_t),
          void *(*REALLOC_FUNC)(void *, size_t),
          void (*FREE_FUNC)(void*))
     You need to provide all three functions.  Those functions need to
     behave exactly as their standard counterparts (`malloc', `realloc'
     and `free').  If you write your own functions please take care to
     set `errno' whenever an error has occurred.

To integrate assuan logging and diagnostics into your own logging
system, you may use the following two functions:

 -- Function: void assuan_set_assuan_log_stream (FILE *FP)
     This sets the stream to which LIBASSUAN should log messages not
     associated with a specific context to FP.  The default is to log
     to `stderr'.  This default value is also changed by using
     `assuan_set_log_stream' (to set a logging stream for a specific
     context) unless this function has been used.  Obviously this is not
     thread-safe and thus it is highly recommended to use this function
     to setup a proper default.

 -- Function: void assuan_set_assuan_log_prefix (const char *TEXT)
     Set the prefix to be used at the start of a line emitted by assuan
     on the log stream to TEXT.  The default is the empty string.

   If you intend to use LIBASSUAN along with the package LIBGPG-ERROR
it is recommended to switch LIBASSUAN into a mode which directly makes
use of error codes provided by LIBGPG-ERROR.  Because the Assuan error
codes and those of gpg-error overlap, it is required to explicitly
request this.  You do this by calling the function

 -- Function: void assuan_set_assuan_err_source (int ERRSOURCE)
     Enable gpg-error style error codes.  ERRSOURCE is one of the
     gpg-error sources.  Switching back to the old style mode is not
     possible.  The usual way to call this function is
          assuan_set_assuan_err_source (GPG_ERR_SOURCE_DEFAULT);


File: assuan.info,  Node: Reading and Writing,  Prev: Initializing the library,  Up: Generalities

5.3 How to communicate with the peer
====================================

What would be a IPC library without the ability to read and write data?
Not very useful.  Libassuan has high level functions to take care of of
the more boring stuff but eventfully actually data needs to be written.

The basic read and write functions are:

 -- Function: assuan_error_t assuan_read_line (assuan_context_t CTX,
          char **LINE, size_t *LINELEN)
     Read the next line from the client or server and store a pointer
     to the buffer holding that line at the address LINE.  The valid
     length of the lines is stored at the address of LINELEN. This
     buffer is valid until the next read operation on the same context
     CTX.  You may modify the context of this buffer.  The buffer is
     invalid (i.e. must not be used) if an error is returned.  This
     function returns `0' on success or an error code.

 -- Function: assuan_error_t assuan_write_line (assuan_context_t CTX,
          const char *LINE)
     Write the string LINE to the other end.  This string needs to be a
     proper formatted Assuan protocol line and should not include a
     linefeed.  Sending linefeed or Nul characters is not possible and
     not allowed by the assuan protocol.  This function shall not be
     used for sending data (D) lines.  This function returns `0' on
     success or an error code.

To actually send bulk data lines a specialized function is available:

 -- Function: assuan_error_t assuan_send_data (assuan_context_t CTX,
          const void *BUFFER, size_t LENGTH)
     This function is used by a server or a client to send LENGTH bytes
     of bulk data in BUFFER to the other end.  The data will be escaped
     as required by the Assuan protocol and may get buffered until a
     line is full.  To force sending the data out BUFFER may be passed
     as `NULL' and LENGTH be `0'.

     When used by a client this flush operation does also send the
     terminating `END' command to terminate the response on an
     "INQUIRE" response.  Note, that the function `assuan_transact'
     takes care of sending this `END' itself.

     This function returns `0' on success or an error code.


File: assuan.info,  Node: Client code,  Next: Server code,  Prev: Generalities,  Up: Top

6 How to develop an Assuan client
*********************************

Depending on the type of the server you want to connect you need to use
different functions.

   For a pipe based server you fork and exec yourself, you use:

 -- Function: assuan_error_t assuan_pipe_connect
          (assuan_context_t *CTX,const char *NAME,
          const char *const ARGV[], int *FD_CHILD_LIST)
     A call to this functions forks the current process and executes the
     program NAME, passing the arguments given in the NULL-terminated
     list ARGV.  A list of file descriptors not to be closed may be
     given using the `-1' terminated array FD_CHILD_LIST.

     On success a new assuan context is returned at CTX.


   If it is not a simple pipe server but one using full-duplex sockets,
the full-fledged variant of the above function should be used:

 -- Function: assuan_error_t assuan_pipe_connect_ext
          (assuan_context_t *CTX,const char *NAME,
          const char *const ARGV[], int *FD_CHILD_LIST,
          void (*ATFORK) (void *, int), void *ATFORKVALUE,
          unsigned int FLAGS)
     A call to this functions forks the current process and executes the
     program NAME, passing the arguments given in the NULL-terminated
     list ARGV.  A list of file descriptors not to be closed may be
     given using the `-1' terminated array FD_CHILD_LIST.

     If NAME as well as ARGV are given as `NULL', only a fork but no
     exec is done.  Thus the child continues to run.  However all file
     descriptors are closed and some special environment variables are
     set. To let the caller detect whether the child or the parent
     continues, the child returns with a CTX set to `NULL'.

     If ATFORK is not NULL, this function is called in the child right
     after the fork and the value ATFORKVALUE is passed as the first
     argument.  That function should only act if the second argument it
     received is `0'.  Such a fork callback is useful to releases
     additional resources not to be used by the child.

     FLAGS controls how the function acts: With a value of `0' it
     expects a simple pipe based server and is in that identical to
     `assuan_pipe_connect'.  With a value of `1' a sever based on
     full-duplex pipes is expected.  Such pipes are usually created
     using the `socketpair' function.  It also enables features only
     available with such servers.


   If you are using a long running server listening either on a TCP or a
Unix domain socket, the following function is used to connect to the
server:

 -- Function: assuan_error_t assuan_socket_connect_ext
          (assuan_context_t *CTX, const char *NAME, pid_t SERVER_PID,
          unsigned int FLAGS)
     Make a connection to the Unix domain socket NAME and return a new
     Assuan context at CTX.  SERVER_PID is currently not used but may
     become handy in the future; if you don't know the server's pid,
     pass `-1'.  With FLAGS set to `1' the `sendmsg' and `recvmesg' are
     used for input and output and thereby enabling the the use of
     descriptor passing.

     Connecting a TCP server is not yet implemented.  Standard URL
     schemes are reserved for NAME specifying a TCP server.


 -- Function: assuan_error_t assuan_socket_connect
          (assuan_context_t *CTX, const char *NAME, pid_t SERVER_PID)
     Same as above but no way to specify flags.

   Finally, after using the Assuan connection, the resources should be
deallocated:

 -- Function: void assuan_disconnect (assuan_context_t CTX)
     Close the connection described by the Assuan context CTX and
     release all resources.  This function also tries to send the BYE
     command to the server but won't fail on error. It is explicitly
     allowed to pass `NULL' for CTX, in which case the function does
     nothing.

   Now that we have a connection to the server all work may be
conveniently done using a couple of callbacks and the transact function:

 -- Function: assuan_error_t assuan_transact (assuan_context_t CTX,
          const char *COMMAND,
          int (*DATA_CB)(void *, const void *, size_t),
          void *DATA_CB_ARG, int (*INQUIRE_CB)(void*, const char *),
          void *INQUIRE_CB_ARG, int (*STATUS_CB)(void*, const char *),
          void *STATUS_CB_ARG)
     Here CTX is the Assuan context opened by one of the connect call.
     COMMAND is the actual one liner Assuan command.  It shall not end
     with a line feed and its length is limited to `ASSUAN_LINELENGTH'
     (~1000 bytes)

     DATA_CB is called by Libassuan for data lines; DATA_CB_ARG is
     passed to it along with the data and the length.  [fixme: needs
     more documentation].

     INQUIRE_CB is called by Libassuan when the server requests
     additional information from the client during the processing of a
     request.  This callback shall check the provided inquriy name and
     send the data as requested back using the `assuan_write_data'.
     The server passed INQURIY_CB_ARG along with the inquiry name to
     the callback.

     STATUS_CB is called by Libassuan for each status line it receives
     from the server. STATUS_CB_ARG is passed along with the status
     line to the callback.

     The function returns `0' success or an error code.  The error code
     may be the one one returned by the server in error lines or one
     generated by the callback functions.


   Libassuan supports descriptor passing on some platforms.  The next
two functions are used with this feature:

 -- Function: assuan_error_t assuan_sendfd (assuan_context_t CTX,
          int FD)
     Send the descriptor FD to the peer using the context CTX.  Note,
     that calling this function with a CTX of `NULL' and FD of `-1' is
     a valid runtime test to check whether descriptor passing is
     available on the platform.


 -- Function: assuan_error_t assuan_receivefd (assuan_context_t CTX,
          int *FD)
     Receive a descriptor pending for the context CTX from the peer.
     This descriptor must be pending before this function is called.  To
     accomplish this the peer needs to use `assuan_sendfd' before the
     trigger is sent (e.g. using `assuan_write_line ("INPUT FD")'.


File: assuan.info,  Node: Server code,  Next: Utilities,  Prev: Client code,  Up: Top

7 How to develop an Assuan server
*********************************

Implementing a server for Assuan is a bit more complex than a client.
However it is a straightforward task we are going to explain using a
commented example.

The list of the implemented server commands is defined by a table like:

       static struct {
         const char *name;
         int (*handler)(assuan_context_t, char *line);
       } command_table[] = {
         { "FOO",          cmd_foo },
         { "BAR",          cmd_bar },
         { "INPUT",        NULL    },
         { "OUTPUT",       NULL    },
         { NULL                    }};

   For convenience this table is usually put after the actual command
handlers (cmd_foo, cmd_bar) or even put inside the the command_handler.
Note that commands with the name "INPUT" and "OUTPUT" do not require a
handler because Libassuan provides a default handler for them.  It is
however possible to assign a custom handler.

   A prerequisite for this example code is that a client has already
connected to the server.  Often there are two modes combined in one
program: A pipe based server, where a client has forked the server
process or a Unix domain socket based server that is listening on the
socket.

     void
     command_handler (int fd)
     {
       int i, rc;
       assuan_context_t ctx;

       if (fd == -1)
         {
           int filedes[2];

           filedes[0] = 0;
           filedes[1] = 1;
           rc = assuan_init_pipe_server (&ctx, filedes);
         }
       else
         rc = assuan_init_socket_server_ext (&ctx, fd, 2);
       if (rc)
         {
           fprintf (stderr, "server init failed: %s\n", gpg_strerror(rc));
           return;
         }

This is the first part of the command hander.  In case this is called as
a pipe based server FD will be based as `fd' and the code assumes that
the server's stdin and stdout are connected to a pipe.  The
initialization is thus done using

 -- Function: assuan_error_t assuan_init_pipe_server
          (assuan_context_t *R_CTX, int FILEDES[2])
     The function takes the two file descriptors from FILEDES and
     returns a new Assuan context at R_CTX.  As usual a return value of
     `0' indicates success and a failure is indicated by a returning an
     error code.  In case of error `NULL' will be stored at R_CTX.

     In case that the server has been called using a bi-directional pipe
     (socketpair), FILEDES is ignored and the file descriptor is taken
     from the environment variable `_assuan_connection_fd'.  You won't
     need to know that because `assuan_pipe_connect_ext', used by the
     client to connect to such a server, automagically sets this
     variable.

If a file descriptor has been passed a the assuan context gets
initialized by

 -- Function: assuan_error_t assuan_init_socket_server_ext
          (assuan_context_t *R_CTX, int FD, unsigned int FLAGS)
     The function takes the file descriptor FD which is expected to be
     associated with a socket and returns a new Assuan context at
     R_CTX. The following bits are currently defined for FLAGS:

    `Bit 0'
          When set `sendmsg' and `recvmesg' are used for input and
          output and thus enabling the use of descriptor passing.

    `Bit 1'
          When set FD refers to an already accepted socket.  That is,
          Libassuan won't call ACCEPT for it.  It is suggested to set
          this bit as it allows better control of the connection state.

     As usual a return value of `0' indicates success and a failure is
     indicated by a returning an error code.  In case of error `NULL'
     will be stored at R_CTX.

After error checking, the implemented assuan commands are registered
with the server.

       for (i=0; command_table[i].name; i++)
         {
           rc = assuan_register_command (ctx,
                                         command_table[i].name,
                                         command_table[i].handler);
           if (rc)
             {
               fprintf (stderr, "register failed: %s\n", gpg_strerror(rc));
               assuan_deinit_server (ctx);
               return;
             }
         }

 -- Function: assuan_error_t assuan_register_command
          (assuan_context_t CTX, const char *CMD_STRING,
          int (*HANDLER) (assuan_context_t, char *))
     This registers the command named CMD_STRING with the Assuan
     context CTX.  HANDLER is the function called by Libassuan if this
     command is received from the client.  NULL may be used HANDLER to
     use a default handler (this only works with a few pre-defined
     commands).  Note, that several default handlers have already been
     registered when the context has been created: "NOP", "CANCEL",
     "OPTION", "BYE", "AUTH", "RESET" and "END".  Although possible,
     these commands should better not be overridden by the application.
     Instead special functions should be used to get hold of these
     commands.

 -- Function: assuan_error_t assuan_register_bye_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t))
     Register function FNC with context CTX to be called right before
     the standard handler for the "BYE" command is being called.

 -- Function: assuan_error_t assuan_register_reset_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t))
     Register function FNC with context CTX to be called right before
     the standard handler for the "RESET" command is being called.

 -- Function: assuan_error_t assuan_register_cancel_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t))
     Register function FNC with context CTX to be called right before
     the standard handler for the "RESET" command is being called.

 -- Function: assuan_error_t assuan_register_option_handler
          (assuan_context_t CTX,
          int (*FNC)(assuan_context_t, const char*, const char*))
     Register function FNC with context CTX for processing of options.
     That function is being called with the context, the name and the
     value of the option.  Leading and trailing spaces are removed from
     the name and the value.  The optional leading two dashes of the
     name are removed as well.  If no value has been given, an empty
     string is passed.  The function needs to return `0' on success or
     an error code.


 -- Function: assuan_error_t assuan_register_input_notify
          (assuan_context_t CTX,
          void (*FNC)(assuan_context_t, const char*))
     Although the input function may be overridden with a custom
     handler, it is often more convenient to use the default handler
     and to know whether an "INPUT" command has been seen and
     successfully parsed.  The second argument passed to that function
     is the entire line.  Because that line has already been parsed
     when the function gets called, a file descriptor set with the
     "INPUT" command may already be used.  That file descriptor is
     available by calling `assuan_get_input_fd'.

 -- Function: assuan_error_t assuan_register_output_notify
          (assuan_context_t CTX,
          void (*FNC)(assuan_context_t, const char*))
     Although the output function may be overridden with a custom
     handler, it is often more convenient to use the default handler
     and to know whether an "OUTPUT" command has been seen and
     successfully parsed.  The second argument passed to that function
     is the entire line.  Because that line has already been parsed
     when the function gets called, a file descriptor set with the
     "OUTPUT" command may already be used.  That file descriptor is
     available by calling `assuan_get_output_fd'.

 -- Function: assuan_error_t assuan_set_hello_line
          (assuan_context_t CTX, const char *LINE)
     This is not actually a register function but may be called also
     after registering commands. It changes the "Hello" line, send by
     the server to the client as a first response, from a default
     string to the string LINE.  For logging purposes, it is often
     useful to use such a custom hello line which may tell version
     numbers and such.  Linefeeds are allowed in this string, however,
     each line needs to be shorter than the Assuan line length limit.


As a last initialization step debugging may be enabled for the current
connection.  This is done using

 -- Function: void assuan_set_log_stream (assuan_context_t CTX,
          FILE *FP)
     Enable debugging for the context CTX and write all debugging
     output to the stdio stream FP.  If the default log stream (used
     for non-context specific events) has not yet been set, a call to
     this functions implicitly sets this stream also to FP.

Now that everything has been setup, we can start to process our clients
requests.

       for (;;)
         {
           rc = assuan_accept (ctx);
           if (rc == -1)
             break;
           else if (rc)
             {
               fprintf (stderr, "accept problem: %s\n", gpg_strerror (rc));
               break;
             }

           rc = assuan_process (ctx);
           if (rc)
             {
               fprintf (stderr, "processing failed: %s\n", gpg_strerror (rc));
               continue;
             }
         }
       assuan_deinit_server (ctx);
     }

For future extensibility and to properly detect the end of the
connection the core of the server should loop over the accept and
process calls.

 -- Function: assuan_error_t assuan_accept (assuan_context_t CTX)
     A call to this function cancel any existing connection and waits
     for a connection from a client (that might be skipped, depending
     on the type of the server).  The initial handshake is performed
     which may include an initial authentication or encryption
     negotiation.  On success `0' is returned.  An error code will be
     returned if the connection could for some reason not be
     established.  An error code of `-1' indicates the end of the
     connection.

 -- Function: assuan_error_t assuan_process (assuan_context_t CTX)
     This function is used to handle the Assuan protocol after a
     connection has been established using `assuan_accept'.  It is the
     main protocol handler responsible for reading the client commands
     and calling the appropriate handlers.  The function returns `0' on
     success or an error code if something went seriously wrong.  Error
     codes from the individual command handlers, i.e. operational
     error, are not seen here.

 -- Function: assuan_error_t assuan_process_next (assuan_context_t CTX)
     This is the same as `assuan_process' but the caller has to provide
     the outer loop.  He should loop as long as the return code is zero
     and stop otherwise; `-1' or `GPG_ERR_EOF' indicate a regular end.

After the loop has terminated, the Assuan context needs to be released:

 -- Function: void assuan_deinit_server (assuan_context_t CTX)
     Releases the resources described by the Assuan context CTX It is
     explicitly allowed to pass `NULL' for CTX, in which case the
     function does nothing.

That is all needed for the server code.  You only need to come up with
the code for the individual command handlers.  Take care that the line
passed to the command handlers is allocated statically within the
context and calls to Assuan functions may modify that line.  You are
also allowed to modify that line which makes parsing much easier.


File: assuan.info,  Node: Utilities,  Next: Library Copying,  Prev: Server code,  Up: Top

8 Utility functions
*******************

There are a lot of helper functions to make writing Assuan code easier.
Some of these functions provide information not available with the
general functions.

 -- Function: void assuan_set_pointer (assuan_context_t CTX,
          void *POINTER)
     Store the arbitrary pointer value POINTER into the context CTX.
     This is useful to provide command handlers with additional
     application context.

 -- Function: void* assuan_get_pointer (assuan_context_t CTX)
     This returns the pointer for context CTX which has been set using
     the above function.  A common way to use it is by setting the
     pointer before starting the processing loop and to retrieve it
     right at the start of a command handler:
          static int
          cmd_foo (assuan_context_t ctx, char *line)
          {
            ctrl_t ctrl = assuan_get_pointer (ctx);
            ...
          }

 -- Function: assuan_error_t assuan_write_status (assuan_context_t CTX,
          const char *KEYWORD, const char *TEXT)
     This is a convenience function for a server to send a status line.
     You need to pass it the KEYWORD and the content of the status
     line in TEXT.

 -- Function: assuan_error_t assuan_inquire (assuan_context_t CTX,
          const char *KEYWORD, unsigned char **R_BUFFER,
          size_t *R_LENGTH, size_t MAXLEN)
     A server may use this function to inquire data from a client.  It
     sends an "INQUIRE" command back to the server and returns the
     response conveniently in a newly allocated buffer.  You need to
     pass at least the server's context CTX and the KEYWORD describing
     the requested data.  All other parameters may be `NULL' or `0',
     although this is rarely useful.

     On success the result is stored in a newly allocated buffer stored
     at R_BUFFER. The length of the data is stored at R_LENGTH.  If
     MAXLEN has not been given as `0', it describes an upper size
     limited of the expected data.  If the client returns too much data
     the function fails and the error code `GPG_ERR_ASS_TOO_MUCH_DATA'
     will be returned.

 -- Function: FILE* assuan_get_data_fp (assuan_context_t CTX)
     Return a stdio stream for the Assuan context CTX.  This stream may
     then be used for data output (assuan_write_data).  The stream is
     valid until the end of the current handler.  Calling `fclose' for
     that stream is not required.  Assuan does all the buffering needed
     to insert the status line as well as the required line wrapping
     and quoting for data lines.

     This function is only available on systems supporting either
     `funopen' or `fopencookie'. If it is not supported `NULL' is
     returned and `errno' is set to `ENOSYS'.

 -- Function: assuan_error_t assuan_set_okay_line
          (assuan_context_t CTX, const char *LINE)
     Set the text used for the next "OK" response to LINE.  This is
     sometimes useful to send additional human readable information
     along with the OK line.  The string is automatically reset at the
     end of the current handler.

 -- Function: assuan_error_t assuan_command_parse_fd
          (assuan_context_t CTX, char *LINE, int *RFD)
     This is the core of the default "INPUT" and "OUTPUT" handler.  It
     may be used in custom commands as well to negotiate a file
     descriptor.  If LINE contains `FD=N', it returns N assuming a
     local file descriptor.  If LINE contains just `FD' it returns a
     file descriptor at RDF; this file descriptor needs to have been
     sent by the client right before using `assuan_sendfd'.

 -- Function: int assuan_get_input_fd (assuan_context_t CTX)
     Return the file descriptor send by the client using the last
     "INPUT" command.  Returns `-1' if no file descriptor is available.

 -- Function: int assuan_get_output_fd (assuan_context_t CTX)
     Return the file descriptor send by the client using the last
     "OUTPUT" command.  Returns `-1' if no file descriptor is available.

 -- Function: assuan_error_t assuan_close_input_fd
          (assuan_context_t CTX)
     Close the file descriptor set by the last "INPUT" command.  This
     function has the advantage over a simple `close' that it can do
     some sanity checks and make sure that a following
     `assuan_get_input_fd' won't return an already closed descriptor.

 -- Function: assuan_error_t assuan_close_output_fd
          (assuan_context_t CTX)
     Close the file descriptor set by the last "OUTPUT" command.  This
     function has the advantage over a simple `close' that it can do
     some sanity checks and make sure that a following
     `assuan_get_input_fd' won't return an already closed descriptor.

 -- Function: int assuan_set_error (assuan_context_t CTX, int ERR,
          const char *TEXT)
     This is a helper to provide a more descriptive error text with
     "ERR" lines.  For this to work the text needs to be stored in the
     context CTX while still being in the command handler.  This
     function is commonly called this way
            return assuan_set_error (ctx, err, "commands needs 5 arguments");
     ERR is passed through and thus the return value of the command
     handler.  The provided text further explains that error code to
     humans.

 -- Function: void assuan_set_flag (assuan_context_t CTX,
          assuan_flag_t FLAG, int VALUE)
     Set the the FLAG for context CTX to VALUE.  Values for flags are
     usually 1 or 0 but certain flags might need other values.

      -- Data type: assuan_flag_t
          The flags are all named and collected in an `enum' for better
          readability.  Currently only one flag is defined:

         `ASSUAN_NO_WAITPID'
               When using a pipe server, by default Libassuan will wait
               for the forked process to die in `assuan_disconnect'.
               In certain cases this is not desirable.  By setting this
               flag, a call to `waitpid' will be suppressed and the
               caller is responsible to cleanup the child process.


 -- Function: int assuan_get_flag (assuan_context_t CTX,
          assuan_flag_t FLAG)
     Return the value of FLAG in context CTX.

 -- Function: const char* assuan_strerror (assuan_error_t ERR)
     This function returns a textual representation of the given error
     code ERR. If this is an unknown value, a string with the value is
     returned. (Beware: it is hold in a static buffer).  It is
     suggested that gpg-error style error numbers should be used and
     thus `gpg_strerror' be called. *Note function
     assuan_set_assuan_err_source::, on how to enable these error codes.

 -- Function: pid_t assuan_get_pid (assuan_context_t CTX)
     This function returns the pid of the connected connected peer.  If
     that pid is not known `-1' is returned.  Note that it is not always
     possible to learn the pid of the other process. For a pipe based
     server the client knows it instantly and a mechanism is in place
     to let the server learn it.  For socket based servers the pid is
     only available on systems providing the "SO_PEERCRED" socket
     option (1).

 -- Function: assuan_error_t assuan_get_peercred (assuan_context_t CTX,
          pid_t *PID, uid_t *UID, gid_t *PID)
     Return user credentials of the peer. This will work only on certain
     systems and only when connected over a socket.  If you are not
     interested in some of the values, pass `NULL' instead of the
     address of an appropriate variable.  PID, UID and GID are only set
     if the function succeeds and returns with `0'.

     As of now only the server is able to retrieve this information.
     Note, that for getting the pid of the peer `assuan_get_pid' is
     usually better suited.

 -- Function: int assuan_get_active_fds (assuan_context_t CTX,
          int WHAT, int *FDARRAY, int FDARRAYSIZE)
     Return all active file descriptors for the context CTX.  This
     function can be used to select on the file descriptors and to call
     `assuan_process_next' if there is an active one.  The first
     descriptor in the array is the one used for the command connection.
     Currently WHAT needs to be `0' to return descriptors used for
     reading, `1' will eventually be used to return descriptors used for
     writing.  FDARRAY is an array of integers provided by the caller;
     FDARRAYSIZE gives the size of that array.

     On success the number of active descriptors are returned.  These
     active descriptors are then stored in FDARRAY.  On error `-1' is
     returned; the most likely reason for this is a too small FDARRAY.

 -- Function: int assuan_pending_line (assuan_context_t CTX)
     A call to this function return true if a full line has been
     buffered and thus an entire assuan line may be read without
     triggering any actual I/O.

 -- Function: void assuan_begin_confidential (assuan_context_t CTX)
     Put the logging feature into confidential mode.  This is to avoid
     logging of sensitive data.

 -- Function: void assuan_end_confidential (assuan_context_t CTX)
     Get the logging feature out of confidential mode.  All data will be
     logged again (if logging is enabled).

 -- Function: FILE* assuan_get_assuan_log_stream (void)
     Return the stream which is currently being using for global
     logging.

 -- Function: const char* assuan_get_assuan_log_prefix (void)
     Return the prefix to be used at the start of a line emitted by
     assuan on the log stream.  The default implementation returns the
     empty string.

   ---------- Footnotes ----------

   (1) to our knowledge only the Linux kernel has this feature


File: assuan.info,  Node: Library Copying,  Next: Copying,  Prev: Utilities,  Up: Top

Appendix A GNU LESSER GENERAL PUBLIC LICENSE
********************************************

                      Version 2.1, February 1999

     Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA 02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

     [This is the first released version of the Lesser GPL.  It also counts
     as the successor of the GNU Library Public License, version 2, hence the
     version number 2.1.]

A.0.1 Preamble
--------------

The licenses for most software are designed to take away your freedom
to share and change it.  By contrast, the GNU General Public Licenses
are intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.

   This license, the Lesser General Public License, applies to some
specially designated software--typically libraries--of the Free
Software Foundation and other authors who decide to use it.  You can use
it too, but we suggest you first think carefully about whether this
license or the ordinary General Public License is the better strategy to
use in any particular case, based on the explanations below.

   When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of it
in new free programs; and that you are informed that you can do these
things.

   To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

   For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

   We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

   To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know that
what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

   Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

   Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and is
quite different from the ordinary General Public License.  We use this
license for certain libraries in order to permit linking those
libraries into non-free programs.

   When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

   We call this license the "Lesser" General Public License because it
does _Less_ to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

   For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it
becomes a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

   In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of free
software.  For example, permission to use the GNU C Library in non-free
programs enables many more people to use the whole GNU operating
system, as well as its variant, the GNU/Linux operating system.

   Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run that
program using a modified version of the Library.

   The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

                   GNU LESSER GENERAL PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License Agreement applies to any software library or other
     program which contains a notice placed by the copyright holder or
     other authorized party saying it may be distributed under the
     terms of this Lesser General Public License (also called "this
     License").  Each licensee is addressed as "you".

     A "library" means a collection of software functions and/or data
     prepared so as to be conveniently linked with application programs
     (which use some of those functions and data) to form executables.

     The "Library", below, refers to any such software library or work
     which has been distributed under these terms.  A "work based on the
     Library" means either the Library or any derivative work under
     copyright law: that is to say, a work containing the Library or a
     portion of it, either verbatim or with modifications and/or
     translated straightforwardly into another language.  (Hereinafter,
     translation is included without limitation in the term
     "modification".)

     "Source code" for a work means the preferred form of the work for
     making modifications to it.  For a library, complete source code
     means all the source code for all modules it contains, plus any
     associated interface definition files, plus the scripts used to
     control compilation and installation of the library.

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running a program using the Library is not restricted, and
     output from such a program is covered only if its contents
     constitute a work based on the Library (independent of the use of
     the Library in a tool for writing it).  Whether that is true
     depends on what the Library does and what the program that uses
     the Library does.

  1. You may copy and distribute verbatim copies of the Library's
     complete source code as you receive it, in any medium, provided
     that you conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and distribute a copy of this License
     along with the Library.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Library or any portion
     of it, thus forming a work based on the Library, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. The modified work must itself be a software library.

       b. You must cause the files modified to carry prominent notices
          stating that you changed the files and the date of any change.

       c. You must cause the whole of the work to be licensed at no
          charge to all third parties under the terms of this License.

       d. If a facility in the modified Library refers to a function or
          a table of data to be supplied by an application program that
          uses the facility, other than as an argument passed when the
          facility is invoked, then you must make a good faith effort
          to ensure that, in the event an application does not supply
          such function or table, the facility still operates, and
          performs whatever part of its purpose remains meaningful.

          (For example, a function in a library to compute square roots
          has a purpose that is entirely well-defined independent of the
          application.  Therefore, Subsection 2d requires that any
          application-supplied function or table used by this function
          must be optional: if the application does not supply it, the
          square root function must still compute square roots.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Library, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Library, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Library.

     In addition, mere aggregation of another work not based on the
     Library with the Library (or with a work based on the Library) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
     License instead of this License to a given copy of the Library.
     To do this, you must alter all the notices that refer to this
     License, so that they refer to the ordinary GNU General Public
     License, version 2, instead of to this License.  (If a newer
     version than version 2 of the ordinary GNU General Public License
     has appeared, then you can specify that version instead if you
     wish.)  Do not make any other change in these notices.

     Once this change is made in a given copy, it is irreversible for
     that copy, so the ordinary GNU General Public License applies to
     all subsequent copies and derivative works made from that copy.

     This option is useful when you wish to copy part of the code of
     the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
     derivative of it, under Section 2) in object code or executable
     form under the terms of Sections 1 and 2 above provided that you
     accompany it with the complete corresponding machine-readable
     source code, which must be distributed under the terms of Sections
     1 and 2 above on a medium customarily used for software
     interchange.

     If distribution of object code is made by offering access to copy
     from a designated place, then offering equivalent access to copy
     the source code from the same place satisfies the requirement to
     distribute the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
     Library, but is designed to work with the Library by being
     compiled or linked with it, is called a "work that uses the
     Library".  Such a work, in isolation, is not a derivative work of
     the Library, and therefore falls outside the scope of this License.

     However, linking a "work that uses the Library" with the Library
     creates an executable that is a derivative of the Library (because
     it contains portions of the Library), rather than a "work that
     uses the library".  The executable is therefore covered by this
     License.  Section 6 states terms for distribution of such
     executables.

     When a "work that uses the Library" uses material from a header
     file that is part of the Library, the object code for the work may
     be a derivative work of the Library even though the source code is
     not.  Whether this is true is especially significant if the work
     can be linked without the Library, or if the work is itself a
     library.  The threshold for this to be true is not precisely
     defined by law.

     If such an object file uses only numerical parameters, data
     structure layouts and accessors, and small macros and small inline
     functions (ten lines or less in length), then the use of the object
     file is unrestricted, regardless of whether it is legally a
     derivative work.  (Executables containing this object code plus
     portions of the Library will still fall under Section 6.)

     Otherwise, if the work is a derivative of the Library, you may
     distribute the object code for the work under the terms of Section
     6.  Any executables containing that work also fall under Section 6,
     whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or
     link a "work that uses the Library" with the Library to produce a
     work containing portions of the Library, and distribute that work
     under terms of your choice, provided that the terms permit
     modification of the work for the customer's own use and reverse
     engineering for debugging such modifications.

     You must give prominent notice with each copy of the work that the
     Library is used in it and that the Library and its use are covered
     by this License.  You must supply a copy of this License.  If the
     work during execution displays copyright notices, you must include
     the copyright notice for the Library among them, as well as a
     reference directing the user to the copy of this License.  Also,
     you must do one of these things:

       a. Accompany the work with the complete corresponding
          machine-readable source code for the Library including
          whatever changes were used in the work (which must be
          distributed under Sections 1 and 2 above); and, if the work
          is an executable linked with the Library, with the complete
          machine-readable "work that uses the Library", as object code
          and/or source code, so that the user can modify the Library
          and then relink to produce a modified executable containing
          the modified Library.  (It is understood that the user who
          changes the contents of definitions files in the Library will
          not necessarily be able to recompile the application to use
          the modified definitions.)

       b. Use a suitable shared library mechanism for linking with the
          Library.  A suitable mechanism is one that (1) uses at run
          time a copy of the library already present on the user's
          computer system, rather than copying library functions into
          the executable, and (2) will operate properly with a modified
          version of the library, if the user installs one, as long as
          the modified version is interface-compatible with the version
          that the work was made with.

       c. Accompany the work with a written offer, valid for at least
          three years, to give the same user the materials specified in
          Subsection 6a, above, for a charge no more than the cost of
          performing this distribution.

       d. If distribution of the work is made by offering access to copy
          from a designated place, offer equivalent access to copy the
          above specified materials from the same place.

       e. Verify that the user has already received a copy of these
          materials or that you have already sent this user a copy.

     For an executable, the required form of the "work that uses the
     Library" must include any data and utility programs needed for
     reproducing the executable from it.  However, as a special
     exception, the materials to be distributed need not include
     anything that is normally distributed (in either source or binary
     form) with the major components (compiler, kernel, and so on) of
     the operating system on which the executable runs, unless that
     component itself accompanies the executable.

     It may happen that this requirement contradicts the license
     restrictions of other proprietary libraries that do not normally
     accompany the operating system.  Such a contradiction means you
     cannot use both them and the Library together in an executable
     that you distribute.

  7. You may place library facilities that are a work based on the
     Library side-by-side in a single library together with other
     library facilities not covered by this License, and distribute
     such a combined library, provided that the separate distribution
     of the work based on the Library and of the other library
     facilities is otherwise permitted, and provided that you do these
     two things:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities.  This must be distributed under the terms of the
          Sections above.

       b. Give prominent notice with the combined library of the fact
          that part of it is a work based on the Library, and explaining
          where to find the accompanying uncombined form of the same
          work.

  8. You may not copy, modify, sublicense, link with, or distribute the
     Library except as expressly provided under this License.  Any
     attempt otherwise to copy, modify, sublicense, link with, or
     distribute the Library is void, and will automatically terminate
     your rights under this License.  However, parties who have
     received copies, or rights, from you under this License will not
     have their licenses terminated so long as such parties remain in
     full compliance.

  9. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Library or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Library (or any work
     based on the Library), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Library or works based on it.

 10. Each time you redistribute the Library (or any work based on the
     Library), the recipient automatically receives a license from the
     original licensor to copy, distribute, link with or modify the
     Library subject to these terms and conditions.  You may not impose
     any further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties with this License.

 11. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Library at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Library by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Library.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply, and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

 12. If the distribution and/or use of the Library is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Library under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

 13. The Free Software Foundation may publish revised and/or new
     versions of the Lesser General Public License from time to time.
     Such new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Library specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Library
     does not specify a license version number, you may choose any
     version ever published by the Free Software Foundation.

 14. If you wish to incorporate parts of the Library into other free
     programs whose distribution conditions are incompatible with these,
     write to the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting
     the sharing and reuse of software generally.

                                NO WARRANTY
 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU.  SHOULD THE
     LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY
     OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS
A.0.2 How to Apply These Terms to Your New Libraries
----------------------------------------------------

If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of
the ordinary General Public License).

   To apply these terms, attach the following notices to the library.
It is safest to attach them to the start of each source file to most
effectively convey the exclusion of warranty; and each file should have
at least the "copyright" line and a pointer to where the full notice is
found.

     ONE LINE TO GIVE THE LIBRARY'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) YEAR  NAME OF AUTHOR

     This library is free software; you can redistribute it and/or modify it
     under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2.1 of the License, or (at
     your option) any later version.

     This library is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02110-1301,
     USA.

   Also add information on how to contact you by electronic and paper
mail.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the library,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the library
     `Frob' (a library for tweaking knobs) written by James Random Hacker.

     SIGNATURE OF TY COON, 1 April 1990
     Ty Coon, President of Vice

   That's all there is to it!


File: assuan.info,  Node: Copying,  Next: Index,  Prev: Library Copying,  Up: Top

Appendix B GNU GENERAL PUBLIC LICENSE
*************************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA 02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

B.0.1 Preamble
--------------

The licenses for most software are designed to take away your freedom
to share and change it.  By contrast, the GNU General Public License is
intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  1. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  2. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  3. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  4. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  6. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  7. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  8. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  9. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

 10. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 11. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY
 12. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 13. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS
How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     59 Temple Place, Suite 330, Boston, MA 02110-1301, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: assuan.info,  Node: Index,  Prev: Copying,  Up: Top

Index
*****

 [index ]
* Menu:

* AM_PATH_LIBASSUAN:                     Automake.            (line  13)
* AM_PATH_LIBASSUAN_PTH:                 Automake.            (line  30)
* AM_PATH_LIBASSUAN_PTHREAD:             Automake.            (line  38)
* assuan_accept:                         Server code.         (line 228)
* assuan_begin_confidential:             Utilities.           (line 183)
* assuan_close_input_fd:                 Utilities.           (line  89)
* assuan_close_output_fd:                Utilities.           (line  96)
* assuan_command_parse_fd:               Utilities.           (line  72)
* assuan_context_t:                      Data Types.          (line  10)
* assuan_deinit_server:                  Server code.         (line 254)
* assuan_disconnect:                     Client code.         (line  81)
* assuan_end_confidential:               Utilities.           (line 187)
* assuan_error_t:                        Data Types.          (line  20)
* assuan_flag_t:                         Utilities.           (line 118)
* assuan_get_active_fds:                 Utilities.           (line 164)
* assuan_get_assuan_log_prefix:          Utilities.           (line 195)
* assuan_get_assuan_log_stream:          Utilities.           (line 191)
* assuan_get_data_fp:                    Utilities.           (line  52)
* assuan_get_flag:                       Utilities.           (line 131)
* assuan_get_input_fd:                   Utilities.           (line  80)
* assuan_get_output_fd:                  Utilities.           (line  84)
* assuan_get_peercred:                   Utilities.           (line 152)
* assuan_get_pid:                        Utilities.           (line 142)
* assuan_get_pointer:                    Utilities.           (line  17)
* assuan_init_pipe_server:               Server code.         (line  63)
* assuan_init_socket_server_ext:         Server code.         (line  80)
* assuan_inquire:                        Utilities.           (line  37)
* assuan_pending_line:                   Utilities.           (line 178)
* assuan_pipe_connect:                   Client code.         (line  14)
* assuan_pipe_connect_ext:               Client code.         (line  30)
* assuan_process:                        Server code.         (line 238)
* assuan_process_next:                   Server code.         (line 247)
* assuan_read_line:                      Reading and Writing. (line  14)
* assuan_receivefd:                      Client code.         (line 134)
* assuan_register_bye_notify:            Server code.         (line 129)
* assuan_register_cancel_notify:         Server code.         (line 139)
* assuan_register_command:               Server code.         (line 116)
* assuan_register_input_notify:          Server code.         (line 157)
* assuan_register_option_handler:        Server code.         (line 145)
* assuan_register_output_notify:         Server code.         (line 169)
* assuan_register_reset_notify:          Server code.         (line 134)
* assuan_send_data:                      Reading and Writing. (line  35)
* assuan_sendfd:                         Client code.         (line 126)
* assuan_set_assuan_err_source:          Initializing the library.
                                                              (line  47)
* assuan_set_assuan_log_prefix:          Initializing the library.
                                                              (line  37)
* assuan_set_assuan_log_stream:          Initializing the library.
                                                              (line  28)
* assuan_set_error:                      Utilities.           (line 103)
* assuan_set_flag:                       Utilities.           (line 114)
* assuan_set_hello_line:                 Server code.         (line 180)
* assuan_set_log_stream:                 Server code.         (line 194)
* assuan_set_malloc_hooks:               Initializing the library.
                                                              (line  19)
* assuan_set_okay_line:                  Utilities.           (line  65)
* assuan_set_pointer:                    Utilities.           (line  12)
* assuan_socket_connect:                 Client code.         (line  75)
* assuan_socket_connect_ext:             Client code.         (line  62)
* assuan_strerror:                       Utilities.           (line 134)
* assuan_transact:                       Client code.         (line  96)
* assuan_write_line:                     Reading and Writing. (line  24)
* assuan_write_status:                   Utilities.           (line  30)
* GPL, GNU General Public License:       Copying.             (line   6)
* introduction:                          Top.                 (line   6)
* LGPL, Lesser General Public License:   Library Copying.     (line   6)



Tag Table:
Node: Top877
Node: Introduction1832
Node: Assuan3928
Node: Implementation5006
Node: Server responses6160
Node: Client requests7956
Node: Error codes10785
Node: Preparation11280
Node: Header11861
Node: Building sources12458
Node: Automake14520
Node: Multi Threading16496
Node: Generalities16923
Node: Data Types17247
Node: Initializing the library18162
Ref: function assuan_set_assuan_err_source20373
Node: Reading and Writing20693
Node: Client code22994
Ref: function assuan_sendfd28601
Ref: fun-assuan_receivedfd28925
Node: Server code29293
Node: Utilities40848
Ref: Utilities-Footnote-150547
Node: Library Copying50611
Node: Copying78775
Node: Index97970

End Tag Table
