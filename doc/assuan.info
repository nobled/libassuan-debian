This is assuan.info, produced by makeinfo version 4.8 from assuan.texi.

INFO-DIR-SECTION GNU Libraries
START-INFO-DIR-ENTRY
* Assuan: (assuan).        An IPC library for non-persistent servers.
END-INFO-DIR-ENTRY
   This file documents the use and the internals of Assuan.

   This is Edition 1.0.2, last updated 5 July 2007, of `The `Developing
with Assuan' Manual', for Version 1.0.2.

   Published by the Free Software Foundation
51 Franklin Street, Fifth Floor
Boston, MA 02110-1301 USA

   Copyright (C) 2002, 2003, 2006 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled "Copying".


File: assuan.info,  Node: Top,  Next: Introduction,  Up: (dir)

Introduction
************

This manual documents how to exploit the Assuan library, a simple
interprocess communcation library.

* Menu:

* Introduction::        An introduction to and the motivation behind Assuan.
* Assuan::              Description of the Assuan protocol.
* Implementation::      Overview of the implementation.
* Preparation::         What you should do before using the library.
* Generalities::        Initialization code and data types used.
* Client code::         How to develop an Assuan client.
* Server code::         How to develop an Assuan server.
* Utilities::           Utility functions.

Miscellaneous

* Library Copying::     GNU Lesser General Public License says
                        how you can copy and share Assuan.
* Copying::             How you can copy and share this manual.

Indices

* Index::	        Index of concepts and symbol names.


File: assuan.info,  Node: Introduction,  Next: Assuan,  Prev: Top,  Up: Top

1 Introduction to Assuan
************************

In an ideal world, Assuan would not be necessary.  Assuan's primary use
is to allow a client to interact with a non-persistent server.  Using
Assuan, this is accomplished by forking a subprocess and communicating
with it via, for example, a pipe or Unix domain socket.  This method is
neither elegant nor efficient, especially when there is a lot of data
spread across several transactions: not only is there a penalty for an
increased number of context switches, but also a significant amount of
data is MEMCPYed from the client to a file descriptor and from the file
descriptor to the server.  Despite these and other disadvantages, this
type of client/server communication can be useful: the client is
completely separate from the server; they are in different address
spaces.  This is especially important in situations where the server
must have a known degree of reliability and data must be protected: as
the Assuan protocol is well defined and clients cannot corrupt the
servers' address space, auditing becomes much easier.

   Assuan was developed for use by the GNU Privacy Guard, GnuPG, to
prevent potentially buggy clients from unwittingly corrupting sensitive
transactions or compromising data such as a secret key.  Assuan permits
the servers, which do the actual work, e.g. encryption and decryption
of data using a secret key, to be developed independently of the user
interfaces, e.g. mail clients and other encryption front ends.  Like a
shared library, the interface is well defined and any number of front
ends can use it; however, unlike a shared library, the client cannot
see or touch the server's data.  As with any modular system, Assuan
helps keep the components small, understandable and less error prone.

   Assuan is not, however, limited to use with GnuPG servers and
clients: it was designed to be flexible enough to meet the demands of
many transaction based environments with non-persistent servers.


File: assuan.info,  Node: Assuan,  Next: Implementation,  Prev: Introduction,  Up: Top

2 Description of the Assuan protocol.
*************************************

The architecture of the modular GnuPG system is based on several highly
specialized modules which compose a network of client/server
communication.  A common framework for intermodule communication is
therefore needed and should be implemented in a library.

   Goals:

   * Common framework for module communication

   * Easy debugging

   * Easy module testing

   * Extendible

   * Optional authentication and encryption facility

   * Usable to access external hardware

   Design criteria:

   * Client server with back channel

   * Use a mainly text based protocol

   * Escape certain control characters

   * Allow indefinite data length

   * Request confidentiality for parts of the communication

   * Dummy module to allow direct linking of client and server

   * Inline data or descriptor passing for bulk data

   * No protection against DoS needed

   * Subliminal channels are not an issue


File: assuan.info,  Node: Implementation,  Next: Preparation,  Prev: Assuan,  Up: Top

3 Implementation
****************

The implementation is line based with a maximum line size of 1000
octets.  The default IPC mechanism are Unix Domain Sockets.

   On a connect request the server responds either with an okay or an
error status.  For authentication check the server may send an Inquiry
Response prior to the first Okay, and it may also issue Status
messages.  The server must check that the client is allowed to connect,
this is done by requesting the credentials for the peer and comparing
them to those of the server.  This avoids attacks based on wrong socket
permissions.

   It may choose to delay the first response in case of an error.  The
server never closes the connection - however the lower protocol may do
so after some time of inactivity or when the connection is in an error
state.

   All textual messages are assumed to be in UTF-8 unless otherwise
noted.

* Menu:

* Server responses::    Description of server responses.
* Client requests::     Description of client requests.
* Error codes::         List of error and status codes.


File: assuan.info,  Node: Server responses,  Next: Client requests,  Up: Implementation

3.1 Server responses
====================

`OK  [<arbitrary debugging information>]'
     Request was successful.

`ERR ERRORCODE [<human readable error description>]'
     Request could not be fulfilled.  The error codes are mostly
     application specific except for a few common ones.

`S KEYWORD <status information depending on keyword>'
     Informational output by the server, still processing the request.

`# <string>'
     Comment line issued only for debugging purposes.  Totally ignored.

`D <raw data>'
     Raw data returned to client. There must be exactly one space after
     the 'D'.  The values for '%', CR and LF must be percent escaped;
     this is encoded as %25, %0D and %0A.  Only uppercase letters
     should be used in the hexadecimal representation.  Other
     characters may be percent escaped for easier debugging.  All these
     Data lines are considered one data stream up to the OK or ERR
     response.  Status and Inquiry Responses may be mixed with the Data
     lines.

`INQUIRE KEYWORD <parameters>'
     Server needs further information from the client.  The client
     should answer with a command which is allowed after an inquiry.
     Note that the server does not confirm that client command but
     either continues processing or ends processing with an error
     status.  Not all commands are allowed.

   A client should only check the first letter of each line and then
skip over to the next token (except for data lines where the raw data
starts exactly after 2 bytes).  Lines larger than 1000 bytes should be
treated as a communication error. (The rationale for having a line
length limit is to allow for easier multiplexing of several channels).


File: assuan.info,  Node: Client requests,  Next: Error codes,  Prev: Server responses,  Up: Implementation

3.2 Client requests
===================

The server waits for client requests after he sent an Okay or Error.
The client should not issue a request in other cases.

     COMMAND <parameters>

   COMMAND is a one word string without preceding white space.
Parameters are command specific, CR, LF and the percent signs should be
percent escaped as described above.  To send a backslash as the last
character it should also be percent escaped.  Percent escaping is
allowed anywhere in the parameters but not in the command.  The line
ends with a CR, LF or just a LF.

   Not yet implemented feature: If there is a need for a parameter list
longer than the line length limit (1000 characters including command and
CR, LF), the last character of the line (right before the CR/LF or LF)
must be a non-escape encoded backslash. The following line is then
expected to be a continuation of the line with the backslash replaced by
a blank and the line ending removed.

     D <raw data>

   Raw data to the server. There must be exactly one space after the
'D'.  The values for '%', CR and LF must be percent escaped; this is
encoded as %25, %0D and %0A.  Only uppercase letters should be used in
the hexadecimal representation.  Other characters may be percent
escaped for easier debugging.  All these Data lines are considered one
data stream up to the OKAY or ERROR response.  Status and Inquiry
Responses may be mixed with the Data lines.

     END

   Lines beginning with a `#' or empty lines are ignored.  This is
useful to comment test scripts.

   Although the commands are application specific, some of them are
used by all protocols and partly directly supported by the Assuan
library:

`BYE'
     Close the connect, the server will reply with an `OK'.

`RESET'
     Reset the connection but not any existing authentication.  The
     server should release all resources associated with the connection.

`END'
     Used by a client to mark the end of raw data.  The server may send
     END to indicate a partial end of data.

`HELP'
     Reserved for future extensions.

`QUIT'
     Reserved for future extensions.

`OPTION'
     Set options for the connection.  The syntax of such a line is
            OPTION NAME [ [=] VALUE ]
     Leading and trailing spaces around NAME and VALUE are allowed but
     should be ignored.  For compatibility reasons, NAME may be
     prefixed with two dashes.  The use of the equal sign is optional
     but suggested if VALUE is given.

`CANCEL'
     This command is reserved for future extensions.

`AUTH'
     This command is reserved for future extensions.  Not yet specified
     as we don't implement it in the first phase.  See my mail to
     gpa-dev on 2001-10-25 about the rationale for measurements against
     local attacks.


File: assuan.info,  Node: Error codes,  Prev: Client requests,  Up: Implementation

3.3 Error codes
===============

In general Libassuan should be used with gpg-error style error codes.
For compatibility reasons and for applications not wanting to use these
error codes, the old Assuan error codes may still be used.  In fact they
are used by default.  To switch to gpg-error style error codes,
applications should call the *Note function
assuan_set_assuan_err_source:: right after startup.


File: assuan.info,  Node: Preparation,  Next: Generalities,  Prev: Implementation,  Up: Top

4 Preparation
*************

To use `LIBASSUAN', you have to perform some changes to your sources
and the build system.  The necessary changes are small and explained in
the following sections.

* Menu:

* Header::                 What header file you need to include.
* Building sources::       How to build sources using the library.
* Automake::               How to build sources with the help of Automake.
* Multi Threading::        How LIBASSUAN can be used in a MT environment.


File: assuan.info,  Node: Header,  Next: Building sources,  Up: Preparation

4.1 Header
==========

All interfaces (data types and functions) of LIBASSUAN are defined in
the header file `assuan.h'.  You must include this in all source files
using the library, either directly or through some other header file,
like this:

     #include <assuan.h>

   The name space of `ASSUAN' is `assuan_*' for function and type names
and `ASSUAN*' for other symbols.  In addition the same name prefixes
with one prepended underscore are reserved for internal use and should
never be used by an application.


File: assuan.info,  Node: Building sources,  Next: Automake,  Prev: Header,  Up: Preparation

4.2 Building sources
====================

If you want to compile a source file including the `assuan.h' header
file, you must make sure that the compiler can find it in the directory
hierarchy.  This is accomplished by adding the path to the directory in
which the header file is located to the compilers include file search
path (via the `-I' option).

   However, the path to the include file is determined at the time the
source is configured.  To solve this problem, LIBGCRYPT ships with a
small helper program `libassuan-config' that knows the path to the
include file and other configuration options.  The options that need to
be added to the compiler invocation at compile time are output by the
`--cflags' option to `libassuan-config'.  The following example shows
how it can be used at the command line:

     gcc -c foo.c $(libassuan-config --cflags)

   Adding the output of `libassuan-config --cflags' to the compiler's
command line will ensure that the compiler can find the `assuan.h'
header file.

   A similar problem occurs when linking the program with the library.
Again, the compiler/linker has to find the library files.  For this to
work, the path to the library files has to be added to the library
search path (via the `-L' option).  For this, the option `--libs' to
`libassuan-config' can be used.  For convenience, this option also
outputs all other options that are required to link the program with
the LIBASSUAN libraries (in particular, the `-lassuan' option).  The
example shows how to link `foo.o' with the LIBASSUAN library to a
program `foo'.

     gcc -o foo foo.o $(libassuan-config --libs)

   Of course you can also combine both examples to a single command by
specifying both options to `libassuan-config':

     gcc -o foo foo.c $(libassuan-config --cflags --libs)

   If your application uses Pth or pthread, you need to pass the option
`--thread=pth' respective `--thread=pthread' to the invocation of
`libassuan-config'.


File: assuan.info,  Node: Automake,  Next: Multi Threading,  Prev: Building sources,  Up: Preparation

4.3 Building sources using Automake
===================================

It is much easier if you use GNU Automake instead of writing your own
Makefiles.  If you do that you do not have to worry about finding and
invoking the `libassuan-config' script at all.  LIBASSUAN provides an
Automake macro that does all the work for you.

 -- Macro: AM_PATH_LIBASSUAN ([MINIMUM-VERSION], [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     Check whether LIBASSUAN (at least version MINIMUM-VERSION, if
     given) exists on the host system.  If it is found, execute
     ACTION-IF-FOUND, otherwise do ACTION-IF-NOT-FOUND, if given.

     Additionally, the function defines `LIBASSUAN_CFLAGS' to the flags
     needed for compilation of the program to find the `assuan.h'
     header file, and `LIBASSUAN_LIBS' to the linker flags needed to
     link the program to the LIBASSUAN library.

   You can use the defined Autoconf variables like this in your
`Makefile.am':

     AM_CPPFLAGS = $(LIBASSUAN_CFLAGS)
     LDADD = $(LIBASSUAN_LIBS)

 -- Macro: AM_PATH_LIBASSUAN_PTH ([MINIMUM-VERSION], [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     Same as `AM_PATH_LIBASSUAN' but checks for the GNU Pth enabled
     version of the library and defines `LIBASSUAN_PTH_CFLAGS'
     `LIBASSUAN_PTH_LIBS' instead.  Use this is you are using GNU Pth.
     Note that you also need to pass the appropriate options for Pth to
     the compiler and linker.

 -- Macro: AM_PATH_LIBASSUAN_PTHREAD ([MINIMUM-VERSION],
          [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
     Same as `AM_PATH_LIBASSUAN' but checks for the pthreads enabled
     version of the library and defines `LIBASSUAN_PTHREAD_CFLAGS'
     `LIBASSUAN_PTHREAD_LIBS' instead.  Use this is you are using GNU
     Pth.  Note that you also need to pass the appropriate options for
     Pth to the compiler and linker.


File: assuan.info,  Node: Multi Threading,  Prev: Automake,  Up: Preparation

4.4 Multi Threading
===================

The LIBGCRYPT library is thread-safe if you adhere to the following
requirements:

   * Run the initialization functions before you actually start to use
     threads.

   * Only one thread at a time may access an LIBASSUAN context.

   * Use `assuan_set_assuan_log_stream' to setup a default log stream.


File: assuan.info,  Node: Generalities,  Next: Client code,  Prev: Preparation,  Up: Top

5 Generalities
**************

* Menu:

* Data Types::                  Data types used by LIBASSUAN.
* Initializing the library::    How to initialize the library.
* Reading and Writing::         How to communicate with the peer.


File: assuan.info,  Node: Data Types,  Next: Initializing the library,  Up: Generalities

5.1 Data Types used by the library
==================================

LIBASSUAN uses a context approach to keep state.  The following data
type is used all over the place:

 -- Data type: assuan_context_t
     The `assuan_context_t' type is a pointer to an object maintained
     internally by the library.  Certain Assuan functions allocate such
     a context and return it to the caller using this data type. Other
     functions take this data type to access the state created by these
     functions.

For compatibility with older versions of LIBASSUAN a data type for
error return values exists:

 -- Data type: assuan_error_t
     This has originally been an `enum' but applications should either
     view it as an `int' or if possible use the `gpg_error_t' data type
     as defined by the LIBGPG-ERROR package.


File: assuan.info,  Node: Initializing the library,  Next: Reading and Writing,  Prev: Data Types,  Up: Generalities

5.2 Initializing the library
============================

In general the library requires no initialization.  There are however
some initialization hooks provided which are often useful.  These
should be called as early as possible and in a multi-threaded
application before a second thread is created.

   If your application uses its own memory allocation functions or
wrappers it is good idea to tell LIBASSUAN about it so it can make use
of the same functions or wrappers.  You do this with

 -- Function: void assuan_set_malloc_hooks
          (void *(*MALLOC_FUNC)(size_t),
          void *(*REALLOC_FUNC)(void *, size_t),
          void (*FREE_FUNC)(void*))
     You need to provide all three functions.  Those functions need to
     behave exactly as their standard counterparts (`malloc', `realloc'
     and `free').  If you write your own functions please take care to
     set `errno' whenever an error has occurred.

To integrate assuan logging and diagnostics into your own logging
system, you may use the following two functions:

 -- Function: void assuan_set_assuan_log_stream (FILE *FP)
     This sets the stream to which LIBASSUAN should log messages not
     associated with a specific context to FP.  The default is to log
     to `stderr'.  This default value is also changed by using
     `assuan_set_log_stream' (to set a logging stream for a specific
     context) unless this function has been used.  Obviously this is not
     thread-safe and thus it is highly recommended to use this function
     to setup a proper default.

 -- Function: void assuan_set_assuan_log_prefix (const char *TEXT)
     Set the prefix to be used at the start of a line emitted by assuan
     on the log stream to TEXT.  The default is the empty string.

   If you intend to use LIBASSUAN along with the package LIBGPG-ERROR
it is recommended to switch LIBASSUAN into a mode which directly makes
use of error codes provided by LIBGPG-ERROR.  Because the Assuan error
codes and those of gpg-error overlap, it is required to explicitly
request this.  You do this by calling the function

 -- Function: void assuan_set_assuan_err_source (int ERRSOURCE)
     Enable gpg-error style error codes.  ERRSOURCE is one of the
     gpg-error sources.  Switching back to the old style mode is not
     possible.  The usual way to call this function is
          assuan_set_assuan_err_source (GPG_ERR_SOURCE_DEFAULT);


File: assuan.info,  Node: Reading and Writing,  Prev: Initializing the library,  Up: Generalities

5.3 How to communicate with the peer
====================================

What would be an IPC library without the ability to read and write
data?  Not very useful.  Libassuan has high level functions to take
care of of the more boring stuff but eventually data needs to be
written and read.

The basic read and write functions are:

 -- Function: assuan_error_t assuan_read_line (assuan_context_t CTX,
          char **LINE, size_t *LINELEN)
     Read the next line from the client or server and store a pointer
     to the buffer holding that line at the address LINE.  The valid
     length of the lines is stored at the address of LINELEN. This
     buffer is valid until the next read operation on the same context
     CTX.  You may modify the context of this buffer.  The buffer is
     invalid (i.e. must not be used) if an error is returned.  This
     function returns `0' on success or an error code.

 -- Function: assuan_error_t assuan_write_line (assuan_context_t CTX,
          const char *LINE)
     Write the string LINE to the other end.  This string needs to be a
     proper formatted Assuan protocol line and should not include a
     linefeed.  Sending linefeed or Nul characters is not possible and
     not allowed by the assuan protocol.  This function shall not be
     used for sending data (D) lines.  This function returns `0' on
     success or an error code.

To actually send bulk data lines a specialized function is available:

 -- Function: assuan_error_t assuan_send_data (assuan_context_t CTX,
          const void *BUFFER, size_t LENGTH)
     This function is used by a server or a client to send LENGTH bytes
     of bulk data in BUFFER to the other end.  The data will be escaped
     as required by the Assuan protocol and may get buffered until a
     line is full.  To force sending the data out BUFFER may be passed
     as `NULL' and LENGTH be `0'.

     When used by a client this flush operation does also send the
     terminating `END' command to terminate the response on an
     "INQUIRE" response.  Note that the function `assuan_transact'
     takes care of sending this `END' itself.

     This function returns `0' on success or an error code.


File: assuan.info,  Node: Client code,  Next: Server code,  Prev: Generalities,  Up: Top

6 How to develop an Assuan client
*********************************

Depending on the type of the server you want to connect you need to use
different functions.

   For a pipe based server you fork and exec yourself, you use:

 -- Function: assuan_error_t assuan_pipe_connect
          (assuan_context_t *CTX,const char *NAME,
          const char *const ARGV[], int *FD_CHILD_LIST)
     A call to this functions forks the current process and executes the
     program NAME, passing the arguments given in the NULL-terminated
     list ARGV.  A list of file descriptors not to be closed may be
     given using the `-1' terminated array FD_CHILD_LIST.

     On success a new assuan context is returned at CTX.


   If it is not a simple pipe server but one using full-duplex sockets,
the full-fledged variant of the above function should be used:

 -- Function: assuan_error_t assuan_pipe_connect_ext
          (assuan_context_t *CTX,const char *NAME,
          const char *const ARGV[], int *FD_CHILD_LIST,
          void (*ATFORK) (void *, int), void *ATFORKVALUE,
          unsigned int FLAGS)
     A call to this functions forks the current process and executes the
     program NAME, passing the arguments given in the NULL-terminated
     list ARGV.  A list of file descriptors not to be closed may be
     given using the `-1' terminated array FD_CHILD_LIST.

     If NAME as well as ARGV are given as `NULL', only a fork but no
     exec is done.  Thus the child continues to run.  However all file
     descriptors are closed and some special environment variables are
     set. To let the caller detect whether the child or the parent
     continues, the child returns with a CTX set to `NULL'.

     If ATFORK is not NULL, this function is called in the child right
     after the fork and the value ATFORKVALUE is passed as the first
     argument.  That function should only act if the second argument it
     received is `0'.  Such a fork callback is useful to release
     additional resources not to be used by the child.

     FLAGS controls how the function acts: With a value of `0' it
     expects a simple pipe based server and behaves similar to
     `assuan_pipe_connect'.  With a value of `1' a sever based on
     full-duplex pipes is expected.  Such pipes are usually created
     using the `socketpair' function.  It also enables features only
     available with such servers.


   If you are using a long running server listening either on a TCP or a
Unix domain socket, the following function is used to connect to the
server:

 -- Function: assuan_error_t assuan_socket_connect_ext
          (assuan_context_t *CTX, const char *NAME, pid_t SERVER_PID,
          unsigned int FLAGS)
     Make a connection to the Unix domain socket NAME and return a new
     Assuan context at CTX.  SERVER_PID is currently not used but may
     become handy in the future; if you don't know the server's pid,
     pass `-1'.  With FLAGS set to `1', `sendmsg' and `recvmesg' are
     used for input and output and thereby enabling the the use of
     descriptor passing.

     Connecting to a TCP server is not yet implemented.  Standard URL
     schemes are reserved for NAME specifying a TCP server.


 -- Function: assuan_error_t assuan_socket_connect
          (assuan_context_t *CTX, const char *NAME, pid_t SERVER_PID)
     Same as above but no way to specify flags.

   Finally, after using the Assuan connection, the resources should be
deallocated:

 -- Function: void assuan_disconnect (assuan_context_t CTX)
     Close the connection described by the Assuan context CTX and
     release all resources.  This function also tries to send the BYE
     command to the server but won't fail on error. It is explicitly
     allowed to pass `NULL' for CTX, in which case the function does
     nothing.

   Now that we have a connection to the server, all work may be
conveniently done using a couple of callbacks and the transact function:

 -- Function: assuan_error_t assuan_transact (assuan_context_t CTX,
          const char *COMMAND,
          int (*DATA_CB)(void *, const void *, size_t),
          void *DATA_CB_ARG, int (*INQUIRE_CB)(void*, const char *),
          void *INQUIRE_CB_ARG, int (*STATUS_CB)(void*, const char *),
          void *STATUS_CB_ARG)
     Here CTX is the Assuan context opened by one of the connect calls.
     COMMAND is the actual one liner Assuan command.  It shall not end
     with a line feed and its length is limited to `ASSUAN_LINELENGTH'
     (~1000 bytes)

     DATA_CB is called by Libassuan for data lines; DATA_CB_ARG is
     passed to it along with the data and the length.  [FIXME: needs
     more documentation].

     INQUIRE_CB is called by Libassuan when the server requests
     additional information from the client while processing the
     command.  This callback shall check the provided inquiry name and
     send the data as requested back using the `assuan_write_data'.
     The server passed INQUIRY_CB_ARG along with the inquiry name to the
     callback.

     STATUS_CB is called by Libassuan for each status line it receives
     from the server. STATUS_CB_ARG is passed along with the status
     line to the callback.

     The function returns `0' success or an error code.  The error code
     may be the one one returned by the server in error lines or one
     generated by the callback functions.


   Libassuan supports descriptor passing on some platforms.  The next
two functions are used with this feature:

 -- Function: assuan_error_t assuan_sendfd (assuan_context_t CTX,
          int FD)
     Send the descriptor FD to the peer using the context CTX.  Note,
     that calling this function with a CTX of `NULL' and FD of `-1' is
     a valid runtime test to check whether descriptor passing is
     available on the platform.  The descriptor must be sent before the
     command is issued that makes use of the descriptor.


 -- Function: assuan_error_t assuan_receivefd (assuan_context_t CTX,
          int *FD)
     Receive a descriptor pending for the context CTX from the peer.
     The descriptor must be pending before this function is called.  To
     accomplish this, the peer needs to use `assuan_sendfd' before the
     trigger is sent (e.g. using `assuan_write_line ("INPUT FD")'.


File: assuan.info,  Node: Server code,  Next: Utilities,  Prev: Client code,  Up: Top

7 How to develop an Assuan server
*********************************

Implementing a server for Assuan is a bit more complex than a client.
However it is a straightforward task we are going to explain using a
commented example.

The list of the implemented server commands is defined by a table like:

       static struct {
         const char *name;
         int (*handler)(assuan_context_t, char *line);
       } command_table[] = {
         { "FOO",          cmd_foo },
         { "BAR",          cmd_bar },
         { "INPUT",        NULL    },
         { "OUTPUT",       NULL    },
         { NULL                    }};

   For convenience this table is usually put after the actual command
handlers (cmd_foo, cmd_bar) or even put inside the command_handler.
Note that commands with the name "INPUT" and "OUTPUT" do not require a
handler because Libassuan provides a default handler for them.  It is
however possible to assign a custom handler.

   A prerequisite for this example code is that a client has already
connected to the server.  Often there are two modes combined in one
program: A pipe based server, where a client has forked the server
process, or a Unix domain socket based server that is listening on the
socket.

     void
     command_handler (int fd)
     {
       int i, rc;
       assuan_context_t ctx;

       if (fd == -1)
         {
           int filedes[2];

           filedes[0] = 0;
           filedes[1] = 1;
           rc = assuan_init_pipe_server (&ctx, filedes);
         }
       else
         rc = assuan_init_socket_server_ext (&ctx, fd, 2);
       if (rc)
         {
           fprintf (stderr, "server init failed: %s\n", gpg_strerror(rc));
           return;
         }

This is the first part of the command handler.  In case this is called
as a pipe based server, FD will be based as `fd' and the code assumes
that the server's `stdin' and `stdout' file handles are connected to a
pipe.  The initialization is thus done using the function:

 -- Function: assuan_error_t assuan_init_pipe_server
          (assuan_context_t *R_CTX, int FILEDES[2])
     The function takes the two file descriptors from FILEDES and
     returns a new Assuan context at R_CTX.  As usual, a return value
     of `0' indicates success and a failure is indicated by a returning
     an error code.  In case of error, `NULL' will be stored at R_CTX.

     In case the server has been called using a bi-directional pipe
     (socketpair), FILEDES is ignored and the file descriptor is taken
     from the environment variable `_assuan_connection_fd'.  You won't
     need to know that because `assuan_pipe_connect_ext', used by the
     client to connect to such a server, automagically sets this
     variable.

If a file descriptor has been passed, the assuan context gets
initialized by the function:

 -- Function: assuan_error_t assuan_init_socket_server_ext
          (assuan_context_t *R_CTX, int FD, unsigned int FLAGS)
     The function takes the file descriptor FD which is expected to be
     associated with a socket and returns a new Assuan context at
     R_CTX. The following bits are currently defined for FLAGS:

    `Bit 0'
          If set, `sendmsg' and `recvmesg' are used for input and
          output and thus enabling the use of descriptor passing.

    `Bit 1'
          If set, FD refers to an already accepted socket.  That is,
          Libassuan won't call ACCEPT for it.  It is suggested to set
          this bit as it allows better control of the connection state.

     As usual, a return value of `0' indicates success and a failure is
     indicated by a returning an error code.  In case of error, `NULL'
     will be stored at R_CTX.

After error checking, the implemented assuan commands are registered
with the server.

       for (i = 0; command_table[i].name; i++)
         {
           rc = assuan_register_command (ctx,
                                         command_table[i].name,
                                         command_table[i].handler);
           if (rc)
             {
               fprintf (stderr, "register failed: %s\n", gpg_strerror (rc));
               assuan_deinit_server (ctx);
               return;
             }
         }

 -- Function: assuan_error_t assuan_register_command
          (assuan_context_t CTX, const char *CMD_STRING,
          int (*HANDLER) (assuan_context_t, char *))
     This registers the command named CMD_STRING with the Assuan
     context CTX.  HANDLER is the function called by Libassuan if this
     command is received from the client.  NULL may be used for HANDLER
     to use a default handler (this only works with a few pre-defined
     commands).  Note that several default handlers have already been
     registered when the context has been created: "NOP", "CANCEL",
     "OPTION", "BYE", "AUTH", "RESET" and "END".  It is possible, but
     not recommended, to override these commands.

 -- Function: assuan_error_t assuan_register_post_cmd_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t), int ERR)
     Register a function to be called right after a command has been
     processed.  ERR is the result code from the last internal assuan
     operation and not the one returned by the handler.  It may be used
     for command-related cleanup.

 -- Function: assuan_error_t assuan_register_bye_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t))
     Register function FNC with context CTX to be called right before
     the standard handler for the "BYE" command is being called.

 -- Function: assuan_error_t assuan_register_reset_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t))
     Register function FNC with context CTX to be called right before
     the standard handler for the "RESET" command is being called.

 -- Function: assuan_error_t assuan_register_cancel_notify
          (assuan_context_t CTX, void (*FNC)(assuan_context_t))
     Register function FNC with context CTX to be called right before
     the standard handler for the "RESET" command is being called.

 -- Function: assuan_error_t assuan_register_option_handler
          (assuan_context_t CTX,
          int (*FNC)(assuan_context_t, const char*, const char*))
     Register function FNC with context CTX for processing options.
     That function is being called with the context, the name and the
     value of the option.  Leading and trailing spaces are removed from
     the name and the value.  The optional leading two dashes of the
     name are removed as well.  If no value has been given, an empty
     string is passed.  The function needs to return `0' on success or
     an error code.


 -- Function: assuan_error_t assuan_register_input_notify
          (assuan_context_t CTX,
          void (*FNC)(assuan_context_t, const char*))
     Although the input function may be overridden with a custom
     handler, it is often more convenient to use the default handler
     and to know whether an "INPUT" command has been seen and
     successfully parsed.  The second argument passed to that function
     is the entire line.  Because that line has already been parsed
     when the function gets called, a file descriptor set with the
     "INPUT" command may already be used.  That file descriptor is
     available by calling `assuan_get_input_fd'.

 -- Function: assuan_error_t assuan_register_output_notify
          (assuan_context_t CTX,
          void (*FNC)(assuan_context_t, const char*))
     Although the output function may be overridden with a custom
     handler, it is often more convenient to use the default handler
     and to know whether an "OUTPUT" command has been seen and
     successfully parsed.  The second argument passed to that function
     is the entire line.  Because that line has already been parsed
     when the function gets called, a file descriptor set with the
     "OUTPUT" command may already be used.  That file descriptor is
     available by calling `assuan_get_output_fd'.

 -- Function: assuan_error_t assuan_set_hello_line
          (assuan_context_t CTX, const char *LINE)
     This is not actually a register function but may be called also
     after registering commands. It changes the "Hello" line, sent by
     the server to the client as a first response, from a default
     string to the string LINE.  For logging purposes, it is often
     useful to use such a custom hello line which may tell version
     numbers and such.  Linefeeds are allowed in this string, however,
     each line needs to be shorter than the Assuan line length limit.


As a last initialization step, debugging may be enabled for the current
connection.  This is done using

 -- Function: void assuan_set_log_stream (assuan_context_t CTX,
          FILE *FP)
     Enable debugging for the context CTX and write all debugging
     output to the stdio stream FP.  If the default log stream (used
     for non-context specific events) has not yet been set, a call to
     this functions implicitly sets this stream also to FP.

Now that everything has been setup, we can start to process our clients
requests.

       for (;;)
         {
           rc = assuan_accept (ctx);
           if (rc == -1)
             break;
           else if (rc)
             {
               fprintf (stderr, "accept problem: %s\n", gpg_strerror (rc));
               break;
             }

           rc = assuan_process (ctx);
           if (rc)
             {
               fprintf (stderr, "processing failed: %s\n", gpg_strerror (rc));
               continue;
             }
         }
       assuan_deinit_server (ctx);
     }

For future extensibility and to properly detect the end of the
connection the core of the server should loop over the accept and
process calls.

 -- Function: assuan_error_t assuan_accept (assuan_context_t CTX)
     A call to this function cancel any existing connection and waits
     for a connection from a client (that might be skipped, depending
     on the type of the server).  The initial handshake is performed
     which may include an initial authentication or encryption
     negotiation.  On success `0' is returned.  An error code will be
     returned if the connection could for some reason not be
     established.  An error code of `-1' indicates the end of the
     connection.

 -- Function: assuan_error_t assuan_process (assuan_context_t CTX)
     This function is used to handle the Assuan protocol after a
     connection has been established using `assuan_accept'.  It is the
     main protocol handler responsible for reading the client commands
     and calling the appropriate handlers.  The function returns `0' on
     success or an error code if something went seriously wrong.  Error
     codes from the individual command handlers, i.e. operational
     error, are not seen here.

 -- Function: assuan_error_t assuan_process_next (assuan_context_t CTX)
     This is the same as `assuan_process' but the caller has to provide
     the outer loop.  He should loop as long as the return code is zero
     and stop otherwise; `-1' or `GPG_ERR_EOF' indicate a regular end.

After the loop has terminated, the Assuan context needs to be released:

 -- Function: void assuan_deinit_server (assuan_context_t CTX)
     Releases the resources described by the Assuan context CTX It is
     explicitly allowed to pass `NULL' for CTX, in which case the
     function does nothing.

That is all needed for the server code.  You only need to come up with
the code for the individual command handlers.  Take care that the line
passed to the command handlers is allocated statically within the
context and calls to Assuan functions may modify that line.  You are
also allowed to modify that line which makes parsing much easier.


File: assuan.info,  Node: Utilities,  Next: Library Copying,  Prev: Server code,  Up: Top

8 Utility functions
*******************

There are a lot of helper functions to make writing Assuan code easier.
Some of these functions provide information not available with the
general functions.

 -- Function: void assuan_set_pointer (assuan_context_t CTX,
          void *POINTER)
     Store the arbitrary pointer value POINTER into the context CTX.
     This is useful to provide command handlers with additional
     application context.

 -- Function: void* assuan_get_pointer (assuan_context_t CTX)
     This returns the pointer for context CTX which has been set using
     the above function.  A common way to use it is by setting the
     pointer before starting the processing loop and to retrieve it
     right at the start of a command handler:
          static int
          cmd_foo (assuan_context_t ctx, char *line)
          {
            ctrl_t ctrl = assuan_get_pointer (ctx);
            ...
          }

 -- Function: assuan_error_t assuan_write_status (assuan_context_t CTX,
          const char *KEYWORD, const char *TEXT)
     This is a convenience function for a server to send a status line.
     You need to pass it the KEYWORD and the content of the status
     line in TEXT.

 -- Function: assuan_error_t assuan_inquire (assuan_context_t CTX,
          const char *KEYWORD, unsigned char **R_BUFFER,
          size_t *R_LENGTH, size_t MAXLEN)
     A server may use this function to inquire data from a client.  It
     sends an "INQUIRE" command back to the server and returns the
     response conveniently in a newly allocated buffer.  You need to
     pass at least the server's context CTX and the KEYWORD describing
     the requested data.  All other parameters may be `NULL' or `0',
     although this is rarely useful.

     On success the result is stored in a newly allocated buffer stored
     at R_BUFFER. The length of the data is stored at R_LENGTH.  If
     MAXLEN has not been given as `0', it describes an upper size
     limited of the expected data.  If the client returns too much data
     the function fails and the error code `GPG_ERR_ASS_TOO_MUCH_DATA'
     will be returned.

 -- Function: FILE* assuan_get_data_fp (assuan_context_t CTX)
     Return a stdio stream for the Assuan context CTX.  This stream may
     then be used for data output (assuan_write_data).  The stream is
     valid until the end of the current handler.  Calling `fclose' for
     that stream is not required.  Assuan does all the buffering needed
     to insert the status line as well as the required line wrapping
     and quoting for data lines.

     This function is only available on systems supporting either
     `funopen' or `fopencookie'. If it is not supported `NULL' is
     returned and `errno' is set to `ENOSYS'.

 -- Function: assuan_error_t assuan_set_okay_line
          (assuan_context_t CTX, const char *LINE)
     Set the text used for the next "OK" response to LINE.  This is
     sometimes useful to send additional human readable information
     along with the OK line.  The string is automatically reset at the
     end of the current handler.

 -- Function: assuan_error_t assuan_command_parse_fd
          (assuan_context_t CTX, char *LINE, int *RFD)
     This is the core of the default "INPUT" and "OUTPUT" handler.  It
     may be used in custom commands as well to negotiate a file
     descriptor.  If LINE contains `FD=N', it returns N in RFD assuming
     a local file descriptor.  If LINE contains just `FD' it returns a
     file descriptor at RFD; this file descriptor needs to have been
     sent by the client right before using `assuan_sendfd'.

 -- Function: int assuan_get_input_fd (assuan_context_t CTX)
     Return the file descriptor sent by the client using the last
     "INPUT" command.  Returns `-1' if no file descriptor is available.

 -- Function: int assuan_get_output_fd (assuan_context_t CTX)
     Return the file descriptor sent by the client using the last
     "OUTPUT" command.  Returns `-1' if no file descriptor is available.

 -- Function: assuan_error_t assuan_close_input_fd
          (assuan_context_t CTX)
     Close the file descriptor set by the last "INPUT" command.  This
     function has the advantage over a simple `close' that it can do
     some sanity checks and make sure that a following
     `assuan_get_input_fd' won't return an already closed descriptor.

 -- Function: assuan_error_t assuan_close_output_fd
          (assuan_context_t CTX)
     Close the file descriptor set by the last "OUTPUT" command.  This
     function has the advantage over a simple `close' that it can do
     some sanity checks and make sure that a following
     `assuan_get_input_fd' won't return an already closed descriptor.

 -- Function: int assuan_set_error (assuan_context_t CTX, int ERR,
          const char *TEXT)
     This is a helper to provide a more descriptive error text with
     "ERR" lines.  For this to work, the text needs to be stored in the
     context CTX while still being in the command handler.  This
     function is commonly called this way
            return assuan_set_error (ctx, err, "commands needs 5 arguments");
     The value ERR is passed through and thus the return value of the
     command handler in the example.  The provided text further explains
     that error code to humans.

 -- Function: void assuan_set_flag (assuan_context_t CTX,
          assuan_flag_t FLAG, int VALUE)
     Set the the FLAG for context CTX to VALUE.  Values for flags are
     usually 1 or 0 but certain flags might need other values.

      -- Data type: assuan_flag_t
          The flags are all named and collected in an `enum' for better
          readability.  Currently only one flag is defined:

         `ASSUAN_NO_WAITPID'
               When using a pipe server, by default Libassuan will wait
               for the forked process to die in `assuan_disconnect'.
               In certain cases this is not desirable.  By setting this
               flag, a call to `waitpid' will be suppressed and the
               caller is responsible to cleanup the child process.

         `ASSUAN_CONFIDENTIAL'
               Uses to return the state of the confidential logging
               mode.  For changing this mode the functions
               `assuan_begin_confidential' and
               `assuan_end_confidential' should be used.


 -- Function: int assuan_get_flag (assuan_context_t CTX,
          assuan_flag_t FLAG)
     Return the value of FLAG in context CTX.

 -- Function: const char* assuan_strerror (assuan_error_t ERR)
     This function returns a textual representation of the given error
     code ERR. If this is an unknown value, a string with the value is
     returned. (Beware: it is hold in a static buffer).  It is
     suggested that gpg-error style error numbers should be used and
     thus `gpg_strerror' be called. *Note function
     assuan_set_assuan_err_source::, on how to enable these error codes.

 -- Function: pid_t assuan_get_pid (assuan_context_t CTX)
     This function returns the pid of the connected connected peer.  If
     that pid is not known `-1' is returned.  Note that it is not always
     possible to learn the pid of the other process. For a pipe based
     server the client knows it instantly and a mechanism is in place
     to let the server learn it.  For socket based servers the pid is
     only available on systems providing the "SO_PEERCRED" socket
     option (1).

 -- Function: assuan_error_t assuan_get_peercred (assuan_context_t CTX,
          pid_t *PID, uid_t *UID, gid_t *PID)
     Return user credentials of the peer. This will work only on certain
     systems and only when connected over a socket.  If you are not
     interested in some of the values, pass `NULL' instead of the
     address of an appropriate variable.  PID, UID and GID are only set
     if the function succeeds and returns with `0'.

     As of now only the server is able to retrieve this information.
     Note, that for getting the pid of the peer `assuan_get_pid' is
     usually better suited.

 -- Function: int assuan_get_active_fds (assuan_context_t CTX,
          int WHAT, int *FDARRAY, int FDARRAYSIZE)
     Return all active file descriptors for the context CTX.  This
     function can be used to select on the file descriptors and to call
     `assuan_process_next' if there is an active one.  The first
     descriptor in the array is the one used for the command connection.
     Currently WHAT needs to be `0' to return descriptors used for
     reading, `1' will eventually be used to return descriptors used for
     writing.  FDARRAY is an array of integers provided by the caller;
     FDARRAYSIZE gives the size of that array.

     On success the number of active descriptors are returned.  These
     active descriptors are then stored in FDARRAY.  On error `-1' is
     returned; the most likely reason for this is a too small FDARRAY.

 -- Function: int assuan_pending_line (assuan_context_t CTX)
     A call to this function return true if a full line has been
     buffered and thus an entire assuan line may be read without
     triggering any actual I/O.

 -- Function: void assuan_set_io_monitor (assuan_context_t CTX,
          unsigned int (*MONITOR)(assuan_context_t CTX, int DIRECTION,
          const char *LINE, size_t LINELEN))
     This function registers an I/O monitor for the context CTX.  Such
     a monitor function is called right after a line has been received
     or just before it is send.  With DIRECTION set to 1 the monitor has
     been called for an output operation; 0 obviosuly means it has been
     called for an input operation.  If the monitor sets bit 0 in the
     return value, any active logging of the line will be suppressed.
     With bit 1 set, the entire line will be ignored.

 -- Function: void assuan_begin_confidential (assuan_context_t CTX)
     Put the logging feature into confidential mode.  This is to avoid
     logging of sensitive data.

 -- Function: void assuan_end_confidential (assuan_context_t CTX)
     Get the logging feature out of confidential mode.  All data will be
     logged again (if logging is enabled).

 -- Function: FILE* assuan_get_assuan_log_stream (void)
     Return the stream which is currently being using for global
     logging.

 -- Function: const char* assuan_get_assuan_log_prefix (void)
     Return the prefix to be used at the start of a line emitted by
     assuan on the log stream.  The default implementation returns the
     empty string.

   ---------- Footnotes ----------

   (1) to our knowledge only the Linux kernel has this feature


File: assuan.info,  Node: Library Copying,  Next: Copying,  Prev: Utilities,  Up: Top

GNU Lesser General Public License
*********************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

   This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public
License, supplemented by the additional permissions listed below.

  0. Additional Definitions.

     As used herein, "this License" refers to version 3 of the GNU
     Lesser General Public License, and the "GNU GPL" refers to version
     3 of the GNU General Public License.

     "The Library" refers to a covered work governed by this License,
     other than an Application or a Combined Work as defined below.

     An "Application" is any work that makes use of an interface
     provided by the Library, but which is not otherwise based on the
     Library.  Defining a subclass of a class defined by the Library is
     deemed a mode of using an interface provided by the Library.

     A "Combined Work" is a work produced by combining or linking an
     Application with the Library.  The particular version of the
     Library with which the Combined Work was made is also called the
     "Linked Version".

     The "Minimal Corresponding Source" for a Combined Work means the
     Corresponding Source for the Combined Work, excluding any source
     code for portions of the Combined Work that, considered in
     isolation, are based on the Application, and not on the Linked
     Version.

     The "Corresponding Application Code" for a Combined Work means the
     object code and/or source code for the Application, including any
     data and utility programs needed for reproducing the Combined Work
     from the Application, but excluding the System Libraries of the
     Combined Work.

  1. Exception to Section 3 of the GNU GPL.

     You may convey a covered work under sections 3 and 4 of this
     License without being bound by section 3 of the GNU GPL.

  2. Conveying Modified Versions.

     If you modify a copy of the Library, and, in your modifications, a
     facility refers to a function or data to be supplied by an
     Application that uses the facility (other than as an argument
     passed when the facility is invoked), then you may convey a copy
     of the modified version:

       a.    under this License, provided that you make a good faith
          effort to    ensure that, in the event an Application does
          not supply the    function or data, the facility still
          operates, and performs    whatever part of its purpose
          remains meaningful, or

       b.    under the GNU GPL, with none of the additional permissions
          of    this License applicable to that copy.

  3. Object Code Incorporating Material from Library Header Files.

     The object code form of an Application may incorporate material
     from a header file that is part of the Library.  You may convey
     such object code under terms of your choice, provided that, if the
     incorporated material is not limited to numerical parameters, data
     structure layouts and accessors, or small macros, inline functions
     and templates (ten or fewer lines in length), you do both of the
     following:

       a.    Give prominent notice with each copy of the object code
          that the    Library is used in it and that the Library and
          its use are    covered by this License.

       b.    Accompany the object code with a copy of the GNU GPL and
          this license    document.

  4. Combined Works.

     You may convey a Combined Work under terms of your choice that,
     taken together, effectively do not restrict modification of the
     portions of the Library contained in the Combined Work and reverse
     engineering for debugging such modifications, if you also do each
     of the following:

       a.    Give prominent notice with each copy of the Combined Work
          that    the Library is used in it and that the Library and
          its use are    covered by this License.

       b.    Accompany the Combined Work with a copy of the GNU GPL and
          this license    document.

       c.    For a Combined Work that displays copyright notices during
            execution, include the copyright notice for the Library
          among    these notices, as well as a reference directing the
          user to the    copies of the GNU GPL and this license
          document.

       d.    Do one of the following:

            0.        Convey the Minimal Corresponding Source under the
               terms of this        License, and the Corresponding
               Application Code in a form        suitable for, and
               under terms that permit, the user to        recombine or
               relink the Application with a modified version of
               the Linked Version to produce a modified Combined Work,
               in the        manner specified by section 6 of the GNU
               GPL for conveying        Corresponding Source.

            1.        Use a suitable shared library mechanism for
               linking with the        Library.  A suitable mechanism
               is one that (a) uses at run time        a copy of the
               Library already present on the user's computer
               system, and (b) will operate properly with a modified
               version        of the Library that is
               interface-compatible with the Linked        Version.

       e.    Provide Installation Information, but only if you would
          otherwise    be required to provide such information under
          section 6 of the    GNU GPL, and only to the extent that such
          information is    necessary to install and execute a modified
          version of the    Combined Work produced by recombining or
          relinking the    Application with a modified version of the
          Linked Version. (If    you use option 4d0, the Installation
          Information must accompany    the Minimal Corresponding
          Source and Corresponding Application    Code. If you use
          option 4d1, you must provide the Installation    Information
          in the manner specified by section 6 of the GNU GPL    for
          conveying Corresponding Source.)

  5. Combined Libraries.

     You may place library facilities that are a work based on the
     Library side by side in a single library together with other
     library facilities that are not Applications and are not covered
     by this License, and convey such a combined library under terms of
     your choice, if you do both of the following:

       a.    Accompany the combined library with a copy of the same
          work based    on the Library, uncombined with any other
          library facilities,    conveyed under the terms of this
          License.

       b.    Give prominent notice with the combined library that part
          of it    is a work based on the Library, and explaining where
          to find the    accompanying uncombined form of the same work.

  6. Revised Versions of the GNU Lesser General Public License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU Lesser General Public License from time to
     time. Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number. If the
     Library as you received it specifies that a certain numbered
     version of the GNU Lesser General Public License "or any later
     version" applies to it, you have the option of following the terms
     and conditions either of that published version or of any later
     version published by the Free Software Foundation. If the Library
     as you received it does not specify a version number of the GNU
     Lesser General Public License, you may choose any version of the
     GNU Lesser General Public License ever published by the Free
     Software Foundation.

     If the Library as you received it specifies that a proxy can decide
     whether future versions of the GNU Lesser General Public License
     shall apply, that proxy's public statement of acceptance of any
     version is permanent authorization for you to choose that version
     for the Library.



File: assuan.info,  Node: Copying,  Next: Index,  Prev: Library Copying,  Up: Top

GNU General Public License
**************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program-to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the software,
or if you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those domains
in future versions of the GPL, as needed to protect the freedom of
users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

                         TERMS AND CONDITIONS
  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it
     on a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may
     convey the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any
     non-source form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work
     with that Major Component, or to implement a Standard Interface
     for which an implementation is available to the public in source
     code form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including
     scripts to control those activities.  However, it does not include
     the work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files
     associated with source files for the work, and the source code for
     shared libraries and dynamically linked subprograms that the work
     is specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output,
     given its content, constitutes a covered work.  This License
     acknowledges your rights of fair use or other equivalent, as
     provided by copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for
     you, or provide you with facilities for running those works,
     provided that you comply with the terms of this License in
     conveying all material for which you do not control copyright.
     Those thus making or running the covered works for you must do so
     exclusively on your behalf, under your direction and control, on
     terms that prohibit them from making any copies of your
     copyrighted material outside their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention
     to limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for
          as long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of
          the written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access
          to the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated
          by you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to
          the object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long
          as needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.


     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product
     is a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or
     installed by the recipient, or for the User Product in which it
     has been modified or installed.  Access to a network may be denied
     when the modification itself materially and adversely affects the
     operation of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License
     with terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be
          marked in reasonable ways as different from the original
          version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or
     conveying under this License, you may add to a covered work
     material governed by the terms of that license document, provided
     that the further restriction does not survive such relicensing or
     conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under
     the third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, you do not qualify to receive new
     licenses for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

 10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to
     possession of the Corresponding Source of the work from the
     predecessor in interest, if the predecessor has it or can get it
     with reasonable efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for
     exercise of rights granted under this License, and you may not
     initiate litigation (including a cross-claim or counterclaim in a
     lawsuit) alleging that any patent claim is infringed by making,
     using, selling, offering for sale, or importing the Program or any
     portion of it.

 11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its
     contributor version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To
     "grant" such a patent license to a party means to make such an
     agreement or commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under
     which you make payment to the third party based on the extent of
     your activity of conveying the work, and under which the third
     party grants, to any of the parties who would receive the covered
     work from you, a discriminatory patent license (a) in connection
     with copies of the covered work conveyed by you (or copies made
     from those copies), or (b) primarily for and in connection with
     specific products or compilations that contain the covered work,
     unless you entered into that arrangement, or that patent license
     was granted, prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

 12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot convey a covered work so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not convey it
     at all.  For example, if you agree to terms that obligate you to
     collect a royalty for further conveying from those to whom you
     convey the Program, the only way you could satisfy both those
     terms and this License would be to refrain entirely from conveying
     the Program.

 13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

 14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.
     Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the
     Free Software Foundation.  If the Program does not specify a
     version number of the GNU General Public License, you may choose
     any version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

 15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

 16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

 17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

                        END OF TERMS AND CONDITIONS
How to Apply These Terms to Your New Programs
=============================================

     If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

     To do so, attach the following notices to the program.  It is
safest to attach them to the start of each source file to most
effectively state the exclusion of warranty; and each file should have
at least the "copyright" line and a pointer to where the full notice is
found.
          ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
          Copyright (C) YEAR NAME OF AUTHOR

          This program is free software: you can redistribute it and/or modify
          it under the terms of the GNU General Public License as published by
          the Free Software Foundation, either version 3 of the License, or (at
          your option) any later version.

          This program is distributed in the hope that it will be useful, but
          WITHOUT ANY WARRANTY; without even the implied warranty of
          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
          General Public License for more details.

          You should have received a copy of the GNU General Public License
          along with this program.  If not, see `http://www.gnu.org/licenses/'.

     Also add information on how to contact you by electronic and paper
mail.

     If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

          PROGRAM Copyright (C) YEAR NAME OF AUTHOR
          This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
          This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details.

     The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

     You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see `http://www.gnu.org/licenses/'.

     The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read `http://www.gnu.org/philosophy/why-not-lgpl.html'.



File: assuan.info,  Node: Index,  Prev: Copying,  Up: Top

Index
*****

 [index ]
* Menu:

* AM_PATH_LIBASSUAN:                     Automake.            (line  13)
* AM_PATH_LIBASSUAN_PTH:                 Automake.            (line  30)
* AM_PATH_LIBASSUAN_PTHREAD:             Automake.            (line  38)
* assuan_accept:                         Server code.         (line 233)
* assuan_begin_confidential:             Utilities.           (line 200)
* assuan_close_input_fd:                 Utilities.           (line  89)
* assuan_close_output_fd:                Utilities.           (line  96)
* assuan_command_parse_fd:               Utilities.           (line  72)
* assuan_context_t:                      Data Types.          (line  10)
* assuan_deinit_server:                  Server code.         (line 259)
* assuan_disconnect:                     Client code.         (line  81)
* assuan_end_confidential:               Utilities.           (line 204)
* assuan_error_t:                        Data Types.          (line  20)
* assuan_flag_t:                         Utilities.           (line 118)
* assuan_get_active_fds:                 Utilities.           (line 170)
* assuan_get_assuan_log_prefix:          Utilities.           (line 212)
* assuan_get_assuan_log_stream:          Utilities.           (line 208)
* assuan_get_data_fp:                    Utilities.           (line  52)
* assuan_get_flag:                       Utilities.           (line 137)
* assuan_get_input_fd:                   Utilities.           (line  80)
* assuan_get_output_fd:                  Utilities.           (line  84)
* assuan_get_peercred:                   Utilities.           (line 158)
* assuan_get_pid:                        Utilities.           (line 148)
* assuan_get_pointer:                    Utilities.           (line  17)
* assuan_init_pipe_server:               Server code.         (line  63)
* assuan_init_socket_server_ext:         Server code.         (line  80)
* assuan_inquire:                        Utilities.           (line  37)
* assuan_pending_line:                   Utilities.           (line 184)
* assuan_pipe_connect:                   Client code.         (line  14)
* assuan_pipe_connect_ext:               Client code.         (line  30)
* assuan_process:                        Server code.         (line 243)
* assuan_process_next:                   Server code.         (line 252)
* assuan_read_line:                      Reading and Writing. (line  15)
* assuan_receivefd:                      Client code.         (line 135)
* assuan_register_bye_notify:            Server code.         (line 134)
* assuan_register_cancel_notify:         Server code.         (line 144)
* assuan_register_command:               Server code.         (line 116)
* assuan_register_input_notify:          Server code.         (line 162)
* assuan_register_option_handler:        Server code.         (line 150)
* assuan_register_output_notify:         Server code.         (line 174)
* assuan_register_post_cmd_notify:       Server code.         (line 127)
* assuan_register_reset_notify:          Server code.         (line 139)
* assuan_send_data:                      Reading and Writing. (line  36)
* assuan_sendfd:                         Client code.         (line 126)
* assuan_set_assuan_err_source:          Initializing the library.
                                                              (line  47)
* assuan_set_assuan_log_prefix:          Initializing the library.
                                                              (line  37)
* assuan_set_assuan_log_stream:          Initializing the library.
                                                              (line  28)
* assuan_set_error:                      Utilities.           (line 103)
* assuan_set_flag:                       Utilities.           (line 114)
* assuan_set_hello_line:                 Server code.         (line 185)
* assuan_set_io_monitor:                 Utilities.           (line 191)
* assuan_set_log_stream:                 Server code.         (line 199)
* assuan_set_malloc_hooks:               Initializing the library.
                                                              (line  19)
* assuan_set_okay_line:                  Utilities.           (line  65)
* assuan_set_pointer:                    Utilities.           (line  12)
* assuan_socket_connect:                 Client code.         (line  75)
* assuan_socket_connect_ext:             Client code.         (line  62)
* assuan_strerror:                       Utilities.           (line 140)
* assuan_transact:                       Client code.         (line  96)
* assuan_write_line:                     Reading and Writing. (line  25)
* assuan_write_status:                   Utilities.           (line  30)
* introduction:                          Top.                 (line   6)



Tag Table:
Node: Top873
Node: Introduction1828
Node: Assuan3894
Node: Implementation4972
Node: Server responses6131
Node: Client requests7927
Node: Error codes10815
Node: Preparation11310
Node: Header11891
Node: Building sources12488
Node: Automake14550
Node: Multi Threading16526
Node: Generalities16953
Node: Data Types17277
Node: Initializing the library18192
Ref: function assuan_set_assuan_err_source20403
Node: Reading and Writing20723
Node: Client code23025
Ref: function assuan_sendfd28622
Ref: fun-assuan_receivedfd29043
Node: Server code29411
Node: Utilities41287
Ref: Utilities-Footnote-151944
Node: Library Copying52008
Node: Copying60679
Node: Index98303

End Tag Table
